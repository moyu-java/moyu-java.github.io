<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx Stream 配置</title>
      <link href="//posts/linux-nginx-install-stream/"/>
      <url>//posts/linux-nginx-install-stream/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/moyu-jun/resource/img/20210928150357.png"></p><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p><span id="more"></span><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Centos 7.9</li><li>Nginx 1.20.1</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>Nginx 的安装不推荐使用 <code>docker</code> 安装。同时不推荐直接 <code>yum install nginx</code>，因为直接安装的话 Nginx 的版本会比较低。</p><p>所以建议安装官方最新文档版本。首先需要添加官方的仓库源。</p><p>创建文件并编辑 <code>/etc/yum.repos.d/nginx.repo</code>。添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=https://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>添加完成后，保存并执行 <code>yum install -y nginx</code> 即可完成安装。安装完成后可以使用 <code>nginx -v</code> 检查版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Nginx</span></span><br><span class="line">yum install -y nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本输出信息</span></span><br><span class="line">nginx version: nginx/1.20.1</span><br></pre></td></tr></table></figure><p>nginx 常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许 nginx 开机启动</span></span><br><span class="line">systemctl enable nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消 nginx 开机启动</span></span><br><span class="line">systemctl disable nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启 nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 nginx</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载 nginx 配置</span></span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><h2 id="Stream-安装"><a href="#Stream-安装" class="headerlink" title="Stream 安装"></a>Stream 安装</h2><p>自从 nginx 1.9 以后 nginx 通过 stream 模块实现了 tcp 代理功能，无需其他软件配合即可实现四层代理和七层代理，即：访问该服务器的指定端口，nginx 就可以充当端口转发的作用将流量导向另一个服务器，同时获取目标服务器的返回数据并返回给请求者。这是一个非常实用的功能。</p><p>安装了 nginx 之后，stream 是默认开启的。或者你可以使用下面的命令查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 nginx 编译配置信息（V 大写）</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/moyu-jun/resource/img/20210928151744.jpg"></p><p>输出信息中带有 <code>--with-stream</code>参数即可代理 TCP 协议。但其实缺失了 stream 模块，还需要额外安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 stream 模块</span></span><br><span class="line">yum install nginx-mod-stream</span><br></pre></td></tr></table></figure><p>安装完成后即可。</p><h2 id="Stream-配置"><a href="#Stream-配置" class="headerlink" title="Stream 配置"></a>Stream 配置</h2><p>请注意，stream 块和 http 块是两个不同的模块，stream 不属于 http 模块，即不能放到&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;，stream 是通过 tcp 层转发，而不是 http 转发。</p><p>如配置在 http 内，启动 nginx 会报如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] &quot;server&quot; directive is not allowed here</span><br></pre></td></tr></table></figure><h3 id="添加-stream-目录"><a href="#添加-stream-目录" class="headerlink" title="添加 stream 目录"></a>添加 stream 目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后追加如下内容</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stream config.</span></span><br><span class="line">stream &#123;</span><br><span class="line">    # tcp/ip proxy</span><br><span class="line">    include /etc/nginx/tcp.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcp-转发配置"><a href="#tcp-转发配置" class="headerlink" title="tcp 转发配置"></a>tcp 转发配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 tcp 转发配置目录</span></span><br><span class="line">mkdir /etc/nginx/tcp.d</span><br><span class="line">cd /etc/nginx/tcp.d</span><br></pre></td></tr></table></figure><p>在 <code>tcp.d</code> 目录下创建一个 <code>mysql.conf</code> 配置文件。用来代理 mysql。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream mysql-server &#123;</span><br><span class="line">    # localhost  可修改为对应的 IP 地址</span><br><span class="line">    # 3306 可修改为对应的数据库端口</span><br><span class="line">    # weight 权重</span><br><span class="line">    server localhost:3306 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # 监听的端口</span><br><span class="line">    listen 13306;</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    proxy_timeout 30s;</span><br><span class="line">    proxy_pass mysql-server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启命令</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>重启之后连接 MySQL 测试即可。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装及配置</title>
      <link href="//posts/docker-install/"/>
      <url>//posts/docker-install/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/26/Kw17keXPrWdIihU.png"></p><p><code>Docker</code> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p><span id="more"></span><h2 id="1-Docker-介绍"><a href="#1-Docker-介绍" class="headerlink" title="1. Docker 介绍"></a>1. Docker 介绍</h2><p><code>Docker</code>是什么？<code>Docker</code>属于<code>容器</code>的一种技术封装，提供更为简单易用的使用接口，让开发运维人员可以更方便快捷的使用<code>容器</code>。对比于传统的虚拟机技术，容器的优点非常明显。</p><table><thead><tr><th align="left">特性</th><th align="left">容器</th><th align="left">虚拟机</th></tr></thead><tbody><tr><td align="left">启动</td><td align="left">秒级</td><td align="left">分钟级</td></tr><tr><td align="left">硬盘使用</td><td align="left">一般为 MB</td><td align="left">一般为 GB</td></tr><tr><td align="left">性能</td><td align="left">接近原生</td><td align="left">较弱</td></tr><tr><td align="left">内存代价</td><td align="left">很小</td><td align="left">较多</td></tr><tr><td align="left">运行密度</td><td align="left">单机支持上千个容器</td><td align="left">一般几十个</td></tr><tr><td align="left">隔离性</td><td align="left">完全隔离</td><td align="left">完全隔离</td></tr><tr><td align="left">迁移性</td><td align="left">优秀</td><td align="left">一般</td></tr></tbody></table><p>从上面的对比来看，<code>容器</code>的各方面性能及特性是优于<code>虚拟机</code>的。</p><h2 id="2-Docker-安装"><a href="#2-Docker-安装" class="headerlink" title="2. Docker 安装"></a>2. Docker 安装</h2><p><code>Docker</code>是一个开放源码的产品，分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。</p><p>社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本文也仅针对社区版。</p><p>目前企业中使用的操作系统一般都是 CentOS 7.9，本文也将基于此版本的系统进行操作。</p><ol><li>首先要更新系统并卸载老版本的 Docker</li></ol><p>一般来说，CentOS 7.9 默认是没有老版本的 Docker 的，但也不妨执行一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新系统及应用</span></span><br><span class="line">yum -y update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载老版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 Docker 的 yum 仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Docker CE</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Docker CE</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证，查看版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的版本信息</span></span><br><span class="line">Docker version 20.10.7, build f0df350</span><br></pre></td></tr></table></figure><h2 id="3-Docker-配置"><a href="#3-Docker-配置" class="headerlink" title="3. Docker 配置"></a>3. Docker 配置</h2><ol><li>设置开机自启</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><ol start="2"><li>配置阿里云镜像加速</li></ol><p>注册阿里云账号并登录，然后进入 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务&#x2F;镜像加速器</a>。查看你自己的加速器地址。</p><p><img src="https://i.loli.net/2021/06/19/3A6pzavrQHXGuOK.png"></p><p>按照上图所示，执行命令即可（将下方的 <code>registry-mirrors</code> 替换为你自己的地址）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://3******p.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载 daemon 配置</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 Docker 服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>重启完成后，可以使用 <code>docker info</code> 查看当前 docker 运行信息，在输出信息的最后面可以看到如下的配置信息。</p><p><img src="https://i.loli.net/2021/06/19/nfDHIbt4MAZxUhC.png"></p><ol start="3"><li>Docker 常用命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 Docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Docker</span></span><br><span class="line">yum update -y docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消开机自启</span></span><br><span class="line">systemctl disable docker</span><br></pre></td></tr></table></figure><ol start="4"><li>Docker 卸载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">yum remove docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动删除配置文件</span></span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="4-运行容器"><a href="#4-运行容器" class="headerlink" title="4. 运行容器"></a>4. 运行容器</h2><p>安装并配置完 Docker 之后，可以运行官方提供的 <code>hello-world</code> 容器进行测试。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看到如下输出说明运行正常</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/19/Pvr9z5hsVNTOJDm.png"></p><h2 id="5-Docker-Compose-安装"><a href="#5-Docker-Compose-安装" class="headerlink" title="5. Docker Compose 安装"></a>5. Docker Compose 安装</h2><p>Docker Compose 其实只有一个可执行文件，将其下载下来放置到指定位置并赋权即可使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 Docker Compose</span></span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋权</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>下载链接说明：</p><table><thead><tr><th>标识</th><th>说明</th><th>CentOS 对应的值</th></tr></thead><tbody><tr><td>1.29.2</td><td>Docker Compose 版本</td><td>1.29.2</td></tr><tr><td>$(uname -s)</td><td>内核名称</td><td>Linux</td></tr><tr><td>$(uname -m)</td><td>主机的硬件架构名称</td><td>x86_64</td></tr></tbody></table><p>如果在执行下载命令时无法下载的话，可以根据上表，手动拼接下载链接，然后将文件下载下来后，改名，放入 <code>/usr/local/bin/</code>目录下，并赋权即可。</p><p>根据上表，本次的下载链接为：<a href="https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64">https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64</a></p><p>如果你需要最新版本的话，可以前往官网查看并替换 <code>1.29.2</code> 即可：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p><p><img src="https://i.loli.net/2021/06/19/WocuZJ1XhlAqtxw.png"></p><h2 id="6-其他系统安装"><a href="#6-其他系统安装" class="headerlink" title="6. 其他系统安装"></a>6. 其他系统安装</h2><p>其他系统的安装教程可以查看官方文档，在此就不一一赘述了。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/">其他Linux版本</a></li></ul><blockquote><p>关于 Docker 或 Docker Compose 具体的使用方法，将在后续的文章中分享。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 设计模式之模板方法模式</title>
      <link href="//posts/java-design-patterns-template-method/"/>
      <url>//posts/java-design-patterns-template-method/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/25/PexN7QChy8jvlUw.png"></p><blockquote><p>定义：一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p></blockquote><span id="more"></span><h2 id="1-优点与缺点"><a href="#1-优点与缺点" class="headerlink" title="1. 优点与缺点"></a>1. 优点与缺点</h2><p>模板方法模式的主要优点如下：</p><ol><li>封装不变部分，扩展可变部分； </li><li>提取公共代码，便于复用和维护；</li><li>行为由父类控制，子类实现，符合开闭原则。</li></ol><p>主要缺点如下：</p><ol><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li><li>由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。</li></ol><h2 id="2-结构"><a href="#2-结构" class="headerlink" title="2. 结构"></a>2. 结构</h2><p>模板方法模式的 UML 类图如下图所示：</p><p><img src="https://i.loli.net/2021/04/25/PexN7QChy8jvlUw.png"></p><p>首先是一个抽象基类 <code>AbstractTemplateMethod</code>，它定义了一个模板方法 <code>templateMethod</code>，模板方法中定义了三个操作步骤，分别是抽象方法 <code>abstractStepOne</code>、<code>abstractStepTwo</code> 和 <code>abstractStepThree</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTemplateMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        abstractStepOne();</span><br><span class="line">        abstractStepTwo();</span><br><span class="line">        abstractStepThree();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractStepOne</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractStepTwo</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractStepThree</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象基类中，这三个方法仅是抽象方法，没有被实现，该方法将由子类继承抽象基类后实现，也就是 <code>ConcreteClassOne</code> 和 <code>ConcreteClassTwo</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClassOne</span> <span class="keyword">extends</span> <span class="title class_">AbstractTemplateMethod</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作步骤 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractStepTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作步骤 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractStepThree</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作步骤 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以抽象基类 <code>AbstractTemplateMethod</code> 的模板方法 <code>templateMethod</code> 就是一个骨架或模板，它只定义了程序执行的步骤，但并不实现，而是延迟到子类 <code>ConcreteClassOne</code> 中去实现。</p><h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h2><p>在我们日常开发中，有一个非常常见的需求，那就是登录的时候，可以选择验证码登录，并且很多应用都支持<strong>短信</strong>和<strong>邮箱</strong>两种验证方式。</p><p>一般验证码需要两个方法，一个是验证码生成并发送给用户，一个则是用户输入验证码然后校验正确性。</p><p>将<strong>验证码生成并发送给用户</strong>这个操作拆解一下，其操作步骤如下：</p><table><thead><tr><th>步骤</th><th>短信</th><th>邮箱</th></tr></thead><tbody><tr><td>1</td><td>账号校验（验证账号为手机号）</td><td>账号校验（验证账号为邮箱）</td></tr><tr><td>2</td><td>验证码生成（6位数字）</td><td>验证码生成（6位数字 + 字母）</td></tr><tr><td>3</td><td>验证码保存</td><td>验证码保存</td></tr><tr><td>4</td><td>验证码发送（使用阿里SMS）</td><td>验证码发送（使用 Email）</td></tr></tbody></table><p>如上可见，两种方式的操作步骤一样，但是每个操作在细节上又有不同，所以以此为例，操作步骤就可以做为模板或骨架，其具体的细节则由不同的子类去实现。这样就是一个模板方法模式了。</p><p>首先要创建一个抽象基类 <code>AbstractValidateCode</code>，定义模板方法，制定操作步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码抽象类</span></span><br><span class="line"><span class="comment"> * 定义模板方法和抽象策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractValidateCode</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; VALIDATE_CODE_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法 - 创建验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(String account)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.账号校验</span></span><br><span class="line">        <span class="keyword">if</span> (!validateParam(account)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;账号无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.验证码生成</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> generate();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.验证码保存</span></span><br><span class="line">        saveCode(account, code);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.验证码发送</span></span><br><span class="line">        send(account, code);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法 - 校验验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String account, String code)</span> &#123;</span><br><span class="line"><span class="comment">// ... 此处具体实现请查看源代码</span></span><br><span class="line">        <span class="comment">// 此方法未调用抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有方法 - 保存验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveCode</span><span class="params">(String account, String code)</span> &#123;</span><br><span class="line">        VALIDATE_CODE_MAP.put(account, code);</span><br><span class="line">        System.out.println(<span class="string">&quot;验证码已保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 - 校验参数，验证手机号或邮箱是否符合规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">validateParam</span><span class="params">(String account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 - 生成验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">generate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 - 发送验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String account, String code)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看出，抽象基类中，一共有三种方法：</p><ul><li>模板方法：定义了一个操作中的骨架，程序执行的步骤。其中调用了抽象方法；</li><li>私有方法：基类私有的方法，不需要公开，也不需要子类实现或重写；</li><li>抽象方法：需要子类去实现具体细节。</li></ul><p>接下来创建短信验证码（SmsValidateCode）的类并继承抽象基类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsValidateCode</span> <span class="keyword">extends</span> <span class="title class_">AbstractValidateCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateParam</span><span class="params">(String account)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isMobile(account)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;手机号码校验通过&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtils.random(<span class="number">6</span>, <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;生成六位纯数字的手机验证码：&quot;</span> + code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String account, String code)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送验证码到手机，在此不做实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;已将验证码发送到手机。手机号码：&quot;</span> + account + <span class="string">&quot;，验证码：&quot;</span> + code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建邮箱验证码（EmailValidateCode）的类并继承抽象基类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮箱验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailValidateCode</span> <span class="keyword">extends</span> <span class="title class_">AbstractValidateCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateParam</span><span class="params">(String account)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isEmail(account)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮箱账号校验通过&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtils.random(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;生成六位英文 + 数字的邮箱验证码.&quot;</span> + code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String account, String code)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送验证码到邮箱，在此不做实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;已将验证码发送到邮箱。邮箱账号：&quot;</span> + account + <span class="string">&quot;，验证码：&quot;</span> + code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码上可以看出，两个类的具体实现是不一样的，而且他们不需要关心每个方法的执行步骤如何。最后创建一个测试类 <code>ApplicationTest</code>来测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板方法模式的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOBILE_ACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;13855287421&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_ACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;example@email.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 手机验证码创建测试</span></span><br><span class="line">        smsValidateCodeTest();</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 邮箱验证码测试</span></span><br><span class="line">        emailValidateCodeTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机验证码测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">smsValidateCodeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始手机验证码测试 --------- &quot;</span>);</span><br><span class="line">        <span class="comment">// 创建手机验证码</span></span><br><span class="line">        <span class="type">AbstractValidateCode</span> <span class="variable">smsValidateCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsValidateCode</span>();</span><br><span class="line">        smsValidateCode.create(MOBILE_ACCOUNT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱验证码测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">emailValidateCodeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始邮箱验证码测试 --------- &quot;</span>);</span><br><span class="line">        <span class="comment">// 创建邮箱验证码</span></span><br><span class="line">        <span class="type">AbstractValidateCode</span> <span class="variable">emailValidateCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmailValidateCode</span>();</span><br><span class="line">        emailValidateCode.create(EMAIL_ACCOUNT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行程序，可以看到如下打印信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">开始手机验证码测试 --------- </span><br><span class="line">手机号码校验通过</span><br><span class="line">生成六位纯数字的手机验证码：754596</span><br><span class="line">验证码已保存</span><br><span class="line">已将验证码发送到手机。手机号码：13855287421，验证码：754596</span><br><span class="line"></span><br><span class="line">开始邮箱验证码测试 --------- </span><br><span class="line">邮箱账号校验通过</span><br><span class="line">生成六位英文 + 数字的邮箱验证码.8POj9C</span><br><span class="line">验证码已保存</span><br><span class="line">已将验证码发送到邮箱。邮箱账号：example@email.com，验证码：8POj9C</span><br></pre></td></tr></table></figure><p>可以看到短信验证码和邮箱验证码的步骤是一样的，但是具体细节却是不同。</p><p>源代码中有完整的实现步骤，以及验证码的校验方面的代码，源代码更完整，在此不再赘述，需要了解的可直接查看源代码。完整代码的UML类图如下所示：</p><p><img src="https://i.loli.net/2021/04/25/c1QERijLbDHCq5N.png"></p><h2 id="4-Hook（钩子）"><a href="#4-Hook（钩子）" class="headerlink" title="4. Hook（钩子）"></a>4. Hook（钩子）</h2><p>在模板方法模式中，基本方法有抽象方法、具体方法和钩子方法（hook）。正确地使用钩子方法，可以让子类控制父类的行为，当然这种控制也是在父类中规定好的。</p><p>还是以验证码举例，有时候子类可能需要自定义消息模板，所以需要在抽象父类中添加钩子方法，让子类来控制父类的行为。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method.hook;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码抽象类 - 添加 Hook</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractValidateCode</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法 - 创建验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(String account)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.账号校验</span></span><br><span class="line">        <span class="keyword">if</span> (!validateParam(account)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;账号无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.验证码生成</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> generate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.验证码保存</span></span><br><span class="line">        saveCode(account, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否自定义模板，使用 Hook</span></span><br><span class="line">        <span class="keyword">if</span> (needCustomizeTemplate()) &#123;</span><br><span class="line">            setMessageTemplate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.验证码发送</span></span><br><span class="line">        send(account, code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hook 方法 - 是否需要自定义模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">needCustomizeTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 - 设置信息模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setMessageTemplate</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码所示，在发送验证码之前，通过 <code>needCustomizeTemplate()</code> 方法判断是否需要设置消息模板。默认不需要，使用默认消息模板即可。如果子类需要自定义，可以重写 <code>needCustomizeTemplate()</code> 方法来控制抽象父类的行为。</p><p>子类代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.template.method.hook;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码 - 添加 Hook</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsValidateCode</span> <span class="keyword">extends</span> <span class="title class_">AbstractValidateCode</span> &#123;</span><br><span class="line"><span class="comment">// ... 省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">needCustomizeTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> getUserInput();</span><br><span class="line">        <span class="keyword">if</span> (answer.toLowerCase().startsWith(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUserInput</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;请问您要设置自定义模板嘛（y/n）？: &quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        answer = s.nextLine();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(answer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!answer.toLowerCase().startsWith(<span class="string">&quot;y&quot;</span>) &amp;&amp; !answer.toLowerCase().startsWith(<span class="string">&quot;n&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在短信验证码中重写 <code>needCustomizeTemplate()</code> ，当用户输入 “yes” 或 “y” 时，就可以设置自定义消息模板了。钩子方法相关的完整代码在 <code>com.junmoyu.template.method.hook</code> 包下。运行 <code>ApplicationTest</code> 中的 <code>main()</code> 方法进行测试。输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">开始手机验证码测试 --------- </span><br><span class="line">手机号码校验通过</span><br><span class="line">生成六位纯数字的手机验证码：756978</span><br><span class="line">请问您要设置自定义模板嘛（y/n）？: y</span><br><span class="line">设置了自定义的短信模板</span><br><span class="line">已将验证码发送到手机。手机号码：13855287421，验证码：756978</span><br><span class="line">请输入六位手机验证码：756978</span><br><span class="line">验证码校验成功，验证通过</span><br><span class="line"></span><br><span class="line">开始邮箱验证码测试 --------- </span><br><span class="line">邮箱账号校验通过</span><br><span class="line">生成六位英文 + 数字的邮箱验证码.XaZSBn</span><br><span class="line">已将验证码发送到邮箱。邮箱账号：example@email.com，验证码：XaZSBn</span><br><span class="line">请输入六位邮箱验证码：XaZSBn</span><br><span class="line">验证码校验成功，验证通过</span><br></pre></td></tr></table></figure><p>通过输出可以看到，短信验证码已经执行了 <code>setMessageTemplate()</code> 方法。</p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><p><a href="https://github.com/moyu-jun/java-design-patterns/tree/master/template-method">项目源代码地址: https://github.com/moyu-jun/java-design-patterns</a></p><p><a href="https://junmoyu.com/java/design-patterns/">更多 Java 设计模式系列文章: https://junmoyu.com/java/design-patterns</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 模板方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 设计模式之单例模式</title>
      <link href="//posts/java-design-patterns-singleton/"/>
      <url>//posts/java-design-patterns-singleton/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/26/jKCU4OepwDolxAh.png"></p><blockquote><p>定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</p></blockquote><span id="more"></span><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><p>单例模式有 3 个特点：</p><ol><li>单例类只有一个实例对象；</li><li>该单例对象必须由单例类自行创建；</li><li>单例类对外提供一个访问该单例的全局访问点。</li></ol><p>一般来说，系统中只需要有一个实例就能满足系统需要时，那么就可以设计成单例模式。</p><p>比如 Windows 的回收站，数据库的连接池，系统中的日志对象等等。（当然，如果你非要设计成多个，我也没有办法是不是）</p><h2 id="2-优点和缺点"><a href="#2-优点和缺点" class="headerlink" title="2. 优点和缺点"></a>2. 优点和缺点</h2><p>单例模式的优点：</p><ol><li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li><li>可以避免对资源的多重占用。</li><li>单例模式设置全局访问点，可以优化和共享资源的访问。</li></ol><p>单例模式的缺点：</p><ol><li>单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li><li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li><li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li></ol><h2 id="3-结构"><a href="#3-结构" class="headerlink" title="3. 结构"></a>3. 结构</h2><p>单例模式的 UML 类图如下图所示，非常简单，只有一个类。</p><p><img src="https://i.loli.net/2021/04/26/jKCU4OepwDolxAh.png"></p><p>上述类图很好地体现了单例模式的3个特点。</p><ol><li>一个私有实例常量 <code>INSTANCE</code>，保证只有一个实例对象；</li><li>一个私有的构造器 <code>private Singleton()&#123;&#125;</code> 保证外部无法实例化，只能由自身创建；</li><li>通过公共的 <code>getInstance()</code> 方法提供一个访问该单例的全局访问点。</li></ol><h2 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h2><p>单例模式可以按不同维度对其进行分类：</p><ul><li>线程安全维度：线程安全的单例模式、线程不安全的单例模式</li><li>对象创建时机：饿汉式的单例模式、懒汉式的单例模式<ul><li>饿汉式 - 第一次调用前（或说类被 JVM 加载时）就已经被实例化了。</li><li>懒汉式 - 只有在第一次调用的时候才会被实例化。</li></ul></li></ul><h3 id="4-1-枚举类单例"><a href="#4-1-枚举类单例" class="headerlink" title="4.1 枚举类单例"></a>4.1 枚举类单例</h3><p>因为 Java 保证枚举类的每个枚举都是单例，所以我们只需要编写一个只有一个枚举的类即可，而且它是<strong>线程安全</strong>的。</p><p>枚举类也完全可以像其他类那样定义自己的字段、方法，如下方实例代码中的 <code>name</code> 参数，<code>getName()</code> 及 <code>setName()</code> 方法等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举的单例实现 - 线程安全</span></span><br><span class="line"><span class="comment"> * 绝对防止多实例化，即使是在面反序列化和反射攻击时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唯一实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果没有初始化的内容，可删除此方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EnumSingleton() &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，内存地址为：&quot;</span> + hashCode());</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;莫语&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Effective Java</code> 书中也推荐使用这种单例模式。因为它足够简单，线程安全，且天然可以防止多实例化，即使是在面反序列化和反射攻击时。</p></blockquote><p>如果需要在单例中做初始化操作，可以使用构造方法实现，否则是不需要构造方法的。使用时可以直接用 <code>EnumSingleton.INSTANCE.getName()</code> 来调用单例中的方法。</p><p>在类中添加一个 <code>main()</code> 方法测试一下看看，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 延迟加载测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试代码启动&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法调用测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + EnumSingleton.INSTANCE.getName());</span><br><span class="line">        EnumSingleton.INSTANCE.setName(<span class="string">&quot;junmoyu.com&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + EnumSingleton.INSTANCE.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射测试</span></span><br><span class="line">        <span class="comment">// 枚举天然防止反射攻击</span></span><br><span class="line">        Class&lt;EnumSingleton&gt; clazz = (Class&lt;EnumSingleton&gt;) Class.forName(<span class="string">&quot;com.junmoyu.singleton.EnumSingleton&quot;</span>);</span><br><span class="line">        Constructor&lt;EnumSingleton&gt; constructor = clazz.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 这里将直接抛出异常</span></span><br><span class="line">        <span class="type">EnumSingleton</span> <span class="variable">singleton</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.junmoyu.singleton.EnumSingleton 被实例化，hashCode：460141958</span><br><span class="line">代码启动</span><br><span class="line">name: 莫语</span><br><span class="line">name: junmoyu.com</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NoSuchMethodException: com.junmoyu.singleton.EnumSingleton.&lt;init&gt;()</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:3082)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Class.java:2178)</span><br><span class="line">at com.junmoyu.singleton.EnumSingleton.main(EnumSingleton.java:51)</span><br></pre></td></tr></table></figure><p>从结果中可以看出，枚举类的单例模式不是延迟加载的，且可以防止反射创建多个实例。关于反射的话题会在后面的章节专门讲解。</p><h3 id="4-2-饿汉式单例"><a href="#4-2-饿汉式单例" class="headerlink" title="4.2 饿汉式单例"></a>4.2 饿汉式单例</h3><p>饿汉式单例，其创建对象的时机是在第一次调用之前，在类被 JVM 加载时就会被创建。其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式 - 线程安全</span></span><br><span class="line"><span class="comment"> * 该类在程序加载时就已经初始化完成了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlySingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化静态实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EagerlySingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerlySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数，保证无法从外部进行实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerlySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可被用户调用以获取类的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerlySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 延迟加载测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试代码启动&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多线程测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;多线程测试：hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + EagerlySingleton.getInstance().hashCode())).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>饿汉式单例</strong>提供了已被实例化的静态实例 <code>INSTANCE</code>，所以不存在多个线程创建多个实例的情况，所以它是<strong>线程安全</strong>的。（即使多线程同时调用<code>getInstance()</code>，获取也是已经实例化的对象，并没有再重新创建）</p><p>这种单例模式的缺点是即使单例没有被使用，对象也会被创建，占用资源（但其实并不会占用太多资源，视具体业务情况而定）。运行<code>main()</code>方法测试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.junmoyu.singleton.EagerlySingleton 被实例化，hashCode：460141958</span><br><span class="line">测试代码启动</span><br><span class="line">多线程测试：hashCode：@460141958</span><br><span class="line">多线程测试：hashCode：@460141958</span><br><span class="line">多线程测试：hashCode：@460141958</span><br><span class="line">多线程测试：hashCode：@460141958</span><br><span class="line">多线程测试：hashCode：@460141958</span><br></pre></td></tr></table></figure><p>可以看到<strong>饿汉式单例</strong>的确是<strong>延迟加载</strong>的，而且<strong>线程安全</strong>。其实线程安全问题比较难以测试，因为此类的确是线程安全的，所以仅做演示，后面会出现线程安全问题的单例方式会着重说明。反射的问题后面也会有专门的章节进行说明。</p><h3 id="4-3-静态内部类单例"><a href="#4-3-静态内部类单例" class="headerlink" title="4.3 静态内部类单例"></a>4.3 静态内部类单例</h3><p>静态内部类实现的单例与上面的饿汉式单例有点相似，这种单例模式也是 <strong>线程安全</strong>的，但它却是延迟加载的，所以对于一些需要延迟加载的单例来说，这种方式是一种非常不错的选择。其代码实现如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类 - 线程安全，延迟加载</span></span><br><span class="line"><span class="comment"> * 写法简单，且可延迟加载，较推荐此种实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用静态内部类来实现延迟加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelperHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticInnerClassSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticInnerClassSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HelperHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 延迟加载测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试代码启动&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多线程测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;多线程测试：hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + StaticInnerClassSingleton.getInstance().hashCode())).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与饿汉式单例不同的是，静态内部类单例是延迟加载的，对于一些占用资源多且使用频率不高的单例来说是个非常不错的实现，而且它也是线程安全的，如果你的业务需要线程安全且延迟加载的单例模式，那么静态内部类是个非常不错的选择。同样运行 <code>main()</code><br>进行测试，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">测试代码启动</span><br><span class="line">com.junmoyu.singleton.StaticInnerClassSingleton 被实例化，hashCode：1251394951</span><br><span class="line">多线程测试：hashCode：@1251394951</span><br><span class="line">多线程测试：hashCode：@1251394951</span><br><span class="line">多线程测试：hashCode：@1251394951</span><br><span class="line">多线程测试：hashCode：@1251394951</span><br><span class="line">多线程测试：hashCode：@1251394951</span><br></pre></td></tr></table></figure><p>通过日志可以明显发现，当主线程 <code>main()</code>启动之后，且睡眠等待一分钟，在调用了 <code>StaticInnerClassSingleton.getInstance().hashCode()</code><br>方法时该类才被实例化，且在多线程中，仅被实例化了一次。</p><h3 id="4-4-懒汉式单例-线程不安全"><a href="#4-4-懒汉式单例-线程不安全" class="headerlink" title="4.4 懒汉式单例 - 线程不安全"></a>4.4 懒汉式单例 - 线程不安全</h3><p>懒汉式的特点就是<strong>延迟加载</strong>，即对象会在第一次调用时才会被实例化，避免资源消耗。</p><p>如下方代码所示，这是最简单的一种写法，但这是 <strong>线程不安全</strong> 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式 - 线程不安全</span></span><br><span class="line"><span class="comment"> * 非常不推荐使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUnsafeLazyLoadedSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadUnsafeLazyLoadedSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadUnsafeLazyLoadedSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可被用户调用以获取类的实例 - 线程不安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadUnsafeLazyLoadedSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">ThreadUnsafeLazyLoadedSingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 延迟加载测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试代码启动&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多线程测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;多线程测试：hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + ThreadUnsafeLazyLoadedSingleton.getInstance().hashCode())).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行 <code>main()</code> 测试一下，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">测试代码启动</span><br><span class="line">com.junmoyu.singleton.ThreadUnsafeLazyLoadedSingleton 被实例化，hashCode：847507483</span><br><span class="line">多线程测试：hashCode：@847507483</span><br><span class="line">com.junmoyu.singleton.ThreadUnsafeLazyLoadedSingleton 被实例化，hashCode：319699154</span><br><span class="line">多线程测试：hashCode：@319699154</span><br><span class="line">com.junmoyu.singleton.ThreadUnsafeLazyLoadedSingleton 被实例化，hashCode：758108352</span><br><span class="line">多线程测试：hashCode：@758108352</span><br><span class="line">多线程测试：hashCode：@847507483</span><br><span class="line">多线程测试：hashCode：@847507483</span><br></pre></td></tr></table></figure><p>从结果可以明显的看到，该类虽然是延迟加载的，但是在多线程中，被实例化多次，这是线程不安全，非常不推荐使用！</p><h3 id="4-5-懒汉式单例-线程安全"><a href="#4-5-懒汉式单例-线程安全" class="headerlink" title="4.5 懒汉式单例 - 线程安全"></a>4.5 懒汉式单例 - 线程安全</h3><p>既然上一种方式是线程不安全的，那么基于上面的写法，做一些修改，让它线程安全不就可以嘛。比较简单的一种做法是在<code>getInstance()</code>方法上加锁，添加 <code>synchronized</code> 关键字即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式 - 线程安全，延迟加载</span></span><br><span class="line"><span class="comment"> * 但因为 getInstance() 方法加锁，导致多线程下性能较差，不推荐使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadSafeLazyLoadedSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadSafeLazyLoadedSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可被用户调用以获取类的实例 - 线程安全</span></span><br><span class="line"><span class="comment">     * 使用 synchronized 加锁以实现线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ThreadSafeLazyLoadedSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过加锁，每次只有一个线程允许访问 <code>getInstance()</code>，实例化对象，当实例化完成后，这个线程才会解锁，其他线程就没办法创建实例了，也就实现了线程安全。</p><p>但是这种方式有一个很大的缺点，就是每次使用时都会因为<strong>锁</strong>而非常消耗性能，因为每次调用 <code>getInstance()</code> 都只有一个线程可以访问，其他线程只能干等着。所以这种方式也是不推荐的。测试代码大家可自己运行看看结果。</p><h3 id="4-6-懒汉式单例-双重校验锁"><a href="#4-6-懒汉式单例-双重校验锁" class="headerlink" title="4.6 懒汉式单例 - 双重校验锁"></a>4.6 懒汉式单例 - 双重校验锁</h3><p>到这里，我们可以看到以上两种懒汉式单例都有非常明显的缺陷，那么怎么解决呢？</p><p>基于上一种方式的代码，既然在方法上加锁会影响性能，那么我们把锁加在方法里面，加锁之前先判断一下是否已经实例化了是不是就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadSafeLazyLoadedSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1 号位置</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadSafeLazyLoadedSingleton.class) &#123;</span><br><span class="line">                <span class="comment">// 2 号位置</span></span><br><span class="line">                INSTANCE = <span class="keyword">new</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上方代码所示，这样就不会出现每次调用 <code>getInstance()</code>都只能有一个线程访问导致性能问题了是不是。</p><p>但是仔细想一想上面是不是在多线程的环境下还是会有问题呢？比如此时有线程A和线程B两个线程，两个线程同时访问 <code>getInstance()</code>方法，同时到达 <strong>1 号位置</strong>，此时他们会争抢锁，因为只能有一个线程进入下面的代码块。</p><p>假设线程A此时抢到了锁，线程B未抢到锁，在1号位置等待。当线程A在 <strong>2 号位置</strong> 创建完实例，返回之后解锁，此时对象已经被实例化了。解锁之后，线程B就可以获取锁了，获取锁之后，线程B也可以再创建一个实例。</p><p>针对上面这种情况，还需要再进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadSafeLazyLoadedSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1 号位置</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadSafeLazyLoadedSingleton.class) &#123;</span><br><span class="line">                <span class="comment">// 2 号位置</span></span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>2 号位置</strong> 同样加上非空判断，这样即使出现上述的情况，当实例化之后，其他线程获取锁，进入到 <strong>2 号位置</strong>，也无法再创建实例了。这种方式就是懒汉式单例的最终解决方案：<strong>双重校验锁</strong>。</p><p>至于为什么要双重校验，答案就在上面的那个例子里面了。<strong>双重校验锁</strong> 单例模式完整的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式最终解决方案 - 线程安全，延迟加载</span></span><br><span class="line"><span class="comment"> * 也叫双重校验锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckLockingSingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入 volatile 保证线程可见性，防止指令重排导致实例被多次实例化</span></span><br><span class="line"><span class="comment">     * 否则线程不安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">DoubleCheckLockingSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DoubleCheckLockingSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全的实例获取，使用双重检查，避免每次获取实例时都加锁</span></span><br><span class="line"><span class="comment">     * 但这种模式依然是有隐患的，INSTANCE 常量必须添加 volatile 关键字才能避免指令重排，保持线程可见性</span></span><br><span class="line"><span class="comment">     * 而 volatile 在 JDK 1.5 之后才支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockingSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLockingSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">DoubleCheckLockingSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法与之前一样，在此就不演示了。</p><p>要注意的事，这种实现方式，<code>INSTANCE</code> 常量是必须要加上 <code>volatile</code> 关键字的，不然还是不能保证完全的线程安全，不加 <code>volatile</code>  可能会因为 JVM 指令重排而出现问题。具体原因在下一个章节详细说明。</p><h2 id="5-进阶"><a href="#5-进阶" class="headerlink" title="5. 进阶"></a>5. 进阶</h2><h3 id="5-1-volatile-关键字解析"><a href="#5-1-volatile-关键字解析" class="headerlink" title="5.1 volatile 关键字解析"></a>5.1 volatile 关键字解析</h3><p>首先来看一下 <strong>双重校验锁</strong> 会出现什么问题。我们先要了解对象的创建过程(new 关键字)，它简单的分为三个阶段:</p><p>1.分配对象内存空间。 2.初始化对象。 3.设置对象指向内存空间。</p><p>但是实际上第二步和第三步的顺序是可以互换的，在 JVM 的优化中存在一种指令重排序的机制，可以加快 JVM 的运行速度。</p><p>那么现在我们来做个实验，运行 <code>DoubleCheckLockingSingleton.main()</code> 方法后，在 <code>target</code> 目录下找到它的 <code>DoubleCheckLockingSingleton.class</code><br>文件，然后使用 <code>javap -c DoubleCheckLockingSingleton.class &gt; DCL.txt</code> 来生成字节码文件。</p><p>打开文件可以在 <code>public static com.junmoyu.singleton.DoubleCheckLockingSingleton getInstance();</code> 下方看到 <code>getInstance()</code><br>方法整个字节码执行过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">17: new           #9      // class com/junmoyu/singleton/ThreadSafeLazyLoadedSingleton</span><br><span class="line">20: dup</span><br><span class="line">21: invokespecial #10     // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">24: putstatic     #5      // Field INSTANCE:Lcom/junmoyu/singleton/ThreadSafeLazyLoadedSingleton;</span><br></pre></td></tr></table></figure><p>上面四个步骤是节选了 <code>new DoubleCheckLockingSingleton()</code> 的执行过程。</p><ul><li>17 : new 指令在 java 堆上为 ThreadSafeLazyLoadedSingleton 对象分配内存空间，并将地址压入操作栈顶</li><li>20 : dup 指令为复制操作栈顶值，并将其压入栈顶，这时操作栈上有连续相同的两个对象地址</li><li>21 : 调用实例的构造函数，实例化对象，这一步会弹出一个之前入栈的对象地址</li><li>24 : 将对象地址赋值给常量 <code>INSTANCE</code></li></ul><p>由上可看到创建一个对象并非原子操作，而是分成了多个步骤，如果 JVM 重排序后，21 在 24 之后，此时分配完了对象的内存空间，且把内存地址复制给了常量 <code>INSTANCE</code>，那么此时 <code>INSTANCE != null</code>。</p><p>如果此时有另外一个线程调用 <code>getInstance()</code> 就会直接返回 <code>INSTANCE</code> 常量，然而对象其实还没有实例化完成，返回的将是一个空的对象。执行过程如下：</p><table><thead><tr><th>执行步骤</th><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>step1</td><td>分配对象内存空间</td><td></td></tr><tr><td>step2</td><td>将对象内存地址赋值给常量 INSTANCE</td><td></td></tr><tr><td>step3</td><td></td><td>判断对象是否为 null</td></tr><tr><td>step4</td><td></td><td>对象不为 null, 返回 INSTANCE</td></tr><tr><td>step5</td><td></td><td>访问 INSTANCE 对象</td></tr><tr><td>step6</td><td>初始化对象</td><td></td></tr></tbody></table><p>如果出现上表所示的情况，那么线程2将获取到一个空的对象，访问对象的参数或方法都将出现异常。所以需要加上 <strong>volatile</strong> 关键字。<strong>volatile</strong> 关键字有两个作用：</p><ol><li>保证对象的可见性。</li><li>防止指令重排序。</li></ol><blockquote><p>对象的创建可能发生指令的重排序，使用 volatile 可以禁止指令的重排序，保证多线程环境下的线程安全。</p></blockquote><p>那么至此，相信你对 <strong>双重校验锁</strong> 的单例为什么要使用 volatile 关键字的原因已经了解清楚了。</p><p>但是你可能还有一个疑惑，为什么之前在 <code>public static synchronized LazyLoadedSingleton getInstance()</code> 方法上加锁时并未提到需要加 volatile 关键字呢。</p><p>其实原因也很简单，因为这里锁的是方法，即使出现了指令重排，其他的线程在调用 <code>getInstance()</code> 时也无法获取实例，因为方法被加锁了，自然也不会出现问题，只是方法加锁性能损耗较大而已。</p><p>在 <code>Spring</code> 源码中也可以看到类似的例子，如 <code>org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver</code><br>类中的 <code>private volatile Map&lt;String, Object&gt; handlerMappings;</code> 参数与 <code>private Map&lt;String, Object&gt; getHandlerMappings()</code><br>方法就是使用 <strong>双重校验锁</strong> 的方式编写的。感兴趣的可以自行查看。</p><h3 id="5-2-反射会导致单例失效嘛？"><a href="#5-2-反射会导致单例失效嘛？" class="headerlink" title="5.2 反射会导致单例失效嘛？"></a>5.2 反射会导致单例失效嘛？</h3><p>至于反射会不会导致单例失效，我们不妨测试一下。在各个单例类的 <code>main()</code> 方法中添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlySingleton</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 反射测试</span></span><br><span class="line">        <span class="comment">// 通过反射的方式直接调用私有构造器（通过在构造器里抛出异常可以解决此问题）</span></span><br><span class="line">        Class&lt;EagerlySingleton&gt; clazz = (Class&lt;EagerlySingleton&gt;) Class.forName(<span class="string">&quot;com.junmoyu.singleton.EagerlySingleton&quot;</span>);</span><br><span class="line">        Constructor&lt;EagerlySingleton&gt; constructor = clazz.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">EagerlySingleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">        <span class="type">EagerlySingleton</span> <span class="variable">singleton2</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反射测试：singleton1 hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + singleton1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;反射测试：singleton2 hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + singleton2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志可以发现，两个对象的 hashCode 是不一样的。除了枚举实现的单例模式外，其他拥有私有构造器的实现方式均可通过反射来创建多个实例。</p><p>要解决的话也很简单。饿汉式单例模式的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式 - 线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EagerlySingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerlySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerlySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 防止通过反射进行实例化从而破坏单例</span></span><br><span class="line">        <span class="comment">// 最好放在开头，如不需要删除即可</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already initialized.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getClass().getCanonicalName() + <span class="string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerlySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他方式实现的单例和饿汉式单例一样，在此就不一一说明了。再次运行 <code>main()</code> 方法测试反射。可以打印日志如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Caused by: java.lang.IllegalStateException: Already initialized.</span><br><span class="line">at com.junmoyu.singleton.StaticInnerClassSingleton.&lt;init&gt;(StaticInnerClassSingleton.java:27)</span><br><span class="line">... 5 more</span><br></pre></td></tr></table></figure><p>可以看到想要通过反射实例化的时候，直接抛出了异常，并没有进行实例化的操作。</p><h3 id="5-3-反序列化问题"><a href="#5-3-反序列化问题" class="headerlink" title="5.3 反序列化问题"></a>5.3 反序列化问题</h3><p>除了反射以外，使用反序列化也同样会破坏单例。</p><p>还是以 <code>EagerlySingleton</code> 类来测试，先让其实现 <code>Serializable</code> 接口，然后在 <code>main()</code> 方法里面添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junmoyu.singleton.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlySingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EagerlySingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerlySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerlySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerlySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 反序列化测试</span></span><br><span class="line">        <span class="comment">// 将对象写入文件</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tempFile&quot;</span>));</span><br><span class="line">        <span class="type">EagerlySingleton</span> <span class="variable">osInstance</span> <span class="operator">=</span> EagerlySingleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化测试：osInstance hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + osInstance.hashCode());</span><br><span class="line">        os.writeObject(osInstance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件中读取对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;tempFile&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">EagerlySingleton</span> <span class="variable">isInstance</span> <span class="operator">=</span> (EagerlySingleton) is.readObject();</span><br><span class="line">        <span class="comment">// 查看 hashCode 是否相同</span></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化测试：isInstance hashCode：&quot;</span> + <span class="string">&quot;@&quot;</span> + isInstance.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>main()</code>方法测试一下，查看日志结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.junmoyu.singleton.serializable.DoubleCheckLockingSingleton 被实例化，hashCode：460141958</span><br><span class="line">反序列化测试：osInstance hashCode：@460141958</span><br><span class="line">反序列化测试：isInstance hashCode：@81628611</span><br></pre></td></tr></table></figure><p>可以看到序列化对象和反序列化之后的对象 hashCode 并不相同。</p><p>想要解决反序列化的问题，只需要添加一个 <code>readResolve()</code> 方法即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlySingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果有序列化需求，需要添加此方法以防止反序列化时重新创建新实例</span></span><br><span class="line"><span class="comment">     * 如无序列化需求可不加，同时去除 implements Serializable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行 <code>main()</code>方法测试一下，查看日志结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.junmoyu.singleton.serializable.EagerlySingleton 被实例化，hashCode：460141958</span><br><span class="line">反序列化测试：osInstance hashCode：@460141958</span><br><span class="line">反序列化测试：isInstance hashCode：@460141958</span><br></pre></td></tr></table></figure><p>可以发现两个对象的 hashCode 已经是一致的了。</p><blockquote><p>枚举类的单例，是天然可以绝对防止多实例化的，反射及反序列化都无效。</p></blockquote><p>至于为什么加了 <code>readResolve()</code>就可以防止反序列化重新创建实例，就要深入源码解析了。这里就不详细叙述了，简单说一下。</p><p>反序列化的对象获取是通过方法 ObjectInputStream#readObject()，进入源码，可以看到 <code>Object obj = readObject0(false);</code> 这行代码最终返回的对象。继续进入源码，在<br>ObjectInputStream#readObject0()方法中可以看到一个 switch 选择器，找到下面这块重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">ObjectInput</span>, ObjectStreamConstants &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readObject0</span><span class="params">(<span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                    <span class="comment">// 单例中为什么枚举最安全，感兴趣的同学可以看一下这里的实现</span></span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                    <span class="comment">// 这里的 readOrdinaryObject 就是读取对象的方法了</span></span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>进入 <code>readOrdinaryObject()</code> 方法，最终的答案都在这里了。</p><p><img src="https://i.loli.net/2021/04/28/rH91hqgmEQFfbz7.png"></p><p>这个方法里面，最重要的两块代码，我圈出来了。第一块其实就是我们在没有加入 <code>readResolve()</code><br>方法时，它通过反射创建了一个新的实例，在第二块代码的判断里 <code>desc.hasReadResolveMethod() == false</code> 将不会执行 if 里面的语句。它返回就是之前创建的新实例了。</p><p>if 中的代码其实就是调用 <code>readResolve()</code> 方法，然后将获取到的对象替换掉第一块代码里面创建的新实例，而<code>readResolve()</code> 方法不正是返回了单例的实例嘛。所以如果加了这个方法，就会执行 if<br>里面的代码，用单例的实例去替换掉反射创建的实例。</p><p>所以现在你知道为什么加入 <code>readResolve()</code> 方法就可以防止反序列化了吧。</p><h3 id="5-4-你以为这就结束了？"><a href="#5-4-你以为这就结束了？" class="headerlink" title="5.4 你以为这就结束了？"></a>5.4 你以为这就结束了？</h3><p>虽然不想再啰嗦了（对不住了！），但是还有一个<strong>重点</strong>！</p><p>如果有两个类加载器（class loader）的存在，那是两个类加载器可能各自创建自己的单例模式。</p><p>因为每个类加载器都定义了一个命名空间，如果有两个或以上的类加载器，不同的类加载器可能会加载同一个类，那么从整个程序来看，同一个类就被加载多次了。也就是会有多个单例的实例并存。</p><p>所以，如果你的程序有多个类加载器又同时使用了单例模式，那么就要小心了。有一个解决方法就是<strong>你可以自行指定类加载器，并指定同一个类加载器。</strong></p><h2 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6. 拓展"></a>6. 拓展</h2><p>另外其实还有一种稍微特殊一点的 “单例” 模式，可以称之为 <strong>线程单例</strong>，那就是使用 ThreadLocal 使每一个线程拥有自己的单例。</p><p>比如 mybatis 3.5.x 版本中的 <code>org.apache.ibatis.executor.ErrorContext</code> 类，就是使用了此种方式实现的，感兴趣的可以自行研究，在此不再赘述。简单贴下代码感受下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorContext</span> &#123;</span><br><span class="line">    <span class="comment">// 这里使用了函数式接口 Supplier&lt;T&gt;，更优雅的初始化 ThreadLocal</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = ThreadLocal.withInitial(ErrorContext::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ErrorContext</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ErrorContext <span class="title function_">instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>至此，我们讨论了六种单例模式的实现方式。</p><ol><li>枚举实现 - 线程安全</li><li>饿汉式单例 - 线程安全</li><li>静态内部类实现 - 线程安全、延迟加载</li><li>普通懒汉式 - 线程不安全、延迟加载</li><li>方法加锁懒汉式 - 线程安全、延迟加载，但性能差</li><li>双重校验锁懒汉式 - 线程安全、延迟加载</li></ol><p>且除了枚举实现的单例外，其他均有反射及序列化会破坏单例的情况。那么综合来看的话，枚举实现的单例是最优的方案，也是 <code>Effective Java</code> 书中推荐的方案。然而在 Java<br>及一些框架的源码中使用枚举单例的例子很少，不知道是为什么，可能是我看的源码还不够多吧。</p><p>因为枚举实现的单例模式其实也属于饿汉式，所以如果在实例化时需要执行耗时操作的话，则不建议使用。</p><p>那么除此之外较好的单例实现还有<strong>静态内部类</strong>的实现，以及<strong>双重校验锁</strong>的实现，可以根据自己的业务需要灵活选择。</p><p><a href="https://github.com/moyu-jun/java-design-patterns/tree/master/singleton">项目源代码地址: https://github.com/moyu-jun/java-design-patterns</a></p><p><a href="https://blog.junmoyu.com/posts/java-design-patterns/">更多 Java 设计模式系列文章: https://blog.junmoyu.com/posts/java-design-patterns/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 设计模式</title>
      <link href="//posts/java-design-patterns/"/>
      <url>//posts/java-design-patterns/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>设计模式是程序员在设计应用程序或系统时可以用来解决常见问题的最佳形式化实践。</p><p>设计模式可以通过提供经过测试的，经过验证的开发范例来加快开发过程。</p><p>重用设计模式有助于防止引起重大问题的细微问题，并且还可以提高熟悉模式的编码人员和架构师的代码可读性。</p><span id="more"></span><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><p>设计模式共有 23 种设计模式，分为三大类：创建型模式（Creative Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><ol><li><p>创建型模式</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.junmoyu.com/posts/java-design-patterns-singleton/">单例模式</a></li><li><input disabled="" type="checkbox"> 工厂模式</li><li><input disabled="" type="checkbox"> 抽象工厂模式</li><li><input disabled="" type="checkbox"> 建造者模式</li><li><input disabled="" type="checkbox"> 原型模式</li></ul></li><li><p>结构型模式</p><ul><li><input disabled="" type="checkbox"> 适配器模式</li><li><input disabled="" type="checkbox"> 桥接模式</li><li><input disabled="" type="checkbox"> 装饰器模式</li><li><input disabled="" type="checkbox"> 组合模式</li><li><input disabled="" type="checkbox"> 外观模式</li><li><input disabled="" type="checkbox"> 享元模式</li><li><input disabled="" type="checkbox"> 代理模式</li></ul></li><li><p>行为型模式</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.junmoyu.com/posts/java-design-patterns-template-method/">模版方法模式</a></li><li><input disabled="" type="checkbox"> 命令模式</li><li><input disabled="" type="checkbox"> 迭代器模式</li><li><input disabled="" type="checkbox"> 观察者模式</li><li><input disabled="" type="checkbox"> 中介者模式</li><li><input disabled="" type="checkbox"> 备忘录模式</li><li><input disabled="" type="checkbox"> 解释器模式</li><li><input disabled="" type="checkbox"> 状态模式</li><li><input disabled="" type="checkbox"> 策略模式</li><li><input disabled="" type="checkbox"> 职责链模式</li><li><input disabled="" type="checkbox"> 访问者模式</li></ul></li></ol><h2 id="3-六大原则"><a href="#3-六大原则" class="headerlink" title="3. 六大原则"></a>3. 六大原则</h2><h3 id="3-1-单一职责原则-SRP-Single-Responsibility-Principle"><a href="#3-1-单一职责原则-SRP-Single-Responsibility-Principle" class="headerlink" title="3.1 单一职责原则(SRP - Single Responsibility Principle)"></a>3.1 单一职责原则(SRP - Single Responsibility Principle)</h3><blockquote><p>定义：一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。</p><p>通俗来说，即一个类只负责一项职责。</p></blockquote><p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点：</p><ol><li><strong>复杂度降低</strong>：一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li><li><strong>可读性提高</strong>：复杂性降低，自然其可读性就会提高。</li><li><strong>可维护性提高</strong>：可读性提高，那自然更容易维护了。</li><li><strong>变更引起的风险降低</strong>：变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li></ol><h3 id="3-2-开放封闭原则-OCP-Open-Closed-Principle"><a href="#3-2-开放封闭原则-OCP-Open-Closed-Principle" class="headerlink" title="3.2 开放封闭原则(OCP - Open Closed Principle)"></a>3.2 开放封闭原则(OCP - Open Closed Principle)</h3><blockquote><p>定义：一个软件实体如模块、类与接口、方法等应该<strong>对扩展开放，对修改关闭</strong>。</p></blockquote><ul><li><strong>对扩展开放</strong>：意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li><li><strong>对修改封闭</strong>：意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li></ul><p><strong>抽象约束、封装变化</strong> 是实现开放封闭原则的重要手段，对于经常发生变化的状态一般将其封装为一个抽象。</p><p>开放封闭原则的作用如下：</p><ol><li>可以提高软件测试的便利：只需对扩展的代码进行测试即可。</li><li>可以提高代码的可复用性：粒度越小，被复用的可能性越大，在面向对象编程中，抽象编程可以提高代码复用性。</li><li>可以提高软件的可维护性：遵循开放封闭原则的代码，稳定性高，延续性强，从而易于扩展和维护。</li></ol><h3 id="3-3-里氏替换原则-LSP-Liskov-Substitution-Principle"><a href="#3-3-里氏替换原则-LSP-Liskov-Substitution-Principle" class="headerlink" title="3.3 里氏替换原则(LSP - Liskov Substitution Principle)"></a>3.3 里氏替换原则(LSP - Liskov Substitution Principle)</h3><blockquote><p>定义：继承必须确保超类所拥有的性质在子类中仍然成立。</p><p>通俗来说，子类可以扩展父类的功能，但不能改变父类原有的功能。</p></blockquote><p>对它具体的定义可总结如下：</p><ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类方法的输入参数更宽松。</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格或相等。</li></ol><p>里氏替换原则的主要作用如下：</p><ol><li>里氏替换原则是实现开闭原则的重要方式之一。</li><li>它克服了继承中重写父类造成的可复用性变差的缺点。</li><li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li><li>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li></ol><h3 id="3-4-最少知识原则-LKP-Least-Knowledge-Principle"><a href="#3-4-最少知识原则-LKP-Least-Knowledge-Principle" class="headerlink" title="3.4 最少知识原则(LKP - Least Knowledge Principle)"></a>3.4 最少知识原则(LKP - Least Knowledge Principle)</h3><p>最少知识原则又叫<strong>迪米特法则</strong>。</p><blockquote><p>定义：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p><p>通俗来说，就是不要跟“陌生人”说话。</p><p>核心思想是 <strong>低耦合、高内聚</strong></p></blockquote><p>正确使用最少知识原则有以下优点：</p><ol><li>降低了类之间的耦合度，提高了模块的相对独立性。</li><li>由于耦合度降低，从而提高了类的可复用率和系统的扩展性。</li></ol><p>但是，过度使用最少知识原则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p><h3 id="3-5-接口隔离原则-ISP-Interface-Segregation-Principle"><a href="#3-5-接口隔离原则-ISP-Interface-Segregation-Principle" class="headerlink" title="3.5 接口隔离原则(ISP - Interface Segregation Principle)"></a>3.5 接口隔离原则(ISP - Interface Segregation Principle)</h3><blockquote><p>定义：一个类对另一个类的依赖应该建立在最小的接口上。</p><p>通俗来说，就是要尽量细化接口，接口中的方法尽量少。</p></blockquote><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ol><li><strong>接口尽量小，但是要有限度</strong>：对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li><li><strong>为依赖接口的类定制服务</strong>：只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li><strong>提高内聚，减少对外交互</strong>：使接口用最少的方法去完成最多的事情。</li></ol><h3 id="3-6-依赖倒置原则-DIP-Dependence-Inversion-Principle"><a href="#3-6-依赖倒置原则-DIP-Dependence-Inversion-Principle" class="headerlink" title="3.6 依赖倒置原则(DIP - Dependence Inversion Principle)"></a>3.6 依赖倒置原则(DIP - Dependence Inversion Principle)</h3><blockquote><p>定义：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><p>核心思想：要面向接口编程，不要面向实现编程。</p></blockquote><p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</p><p>依赖倒置原则，有以下作用：</p><ol><li>依赖倒置原则可以降低类间的耦合性。</li><li>依赖倒置原则可以提高系统的稳定性。</li><li>依赖倒置原则可以减少并行开发引起的风险。</li><li>依赖倒置原则可以提高代码的可读性和可维护性。</li></ol><p>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性。所以在实际编程中，主要遵循以下4点，就能在项目中满足这个规则：</p><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则。</li></ol><h3 id="3-7-六大原则总结"><a href="#3-7-六大原则总结" class="headerlink" title="3.7 六大原则总结"></a>3.7 六大原则总结</h3><ul><li><strong>单一职责原则</strong>告诉我们实现类要职责单一；</li><li><strong>里氏替换原则</strong>告诉我们不要破坏继承体系；</li><li><strong>依赖倒置原则</strong>告诉我们要面向接口编程；</li><li><strong>接口隔离原则</strong>告诉我们在设计接口的时候要精简单一；</li><li><strong>最少知识原则</strong>告诉我们要降低耦合；</li><li><strong>开闭原则</strong>是总纲，它告诉我们要对扩展开放，对修改关闭。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba：Nacos Discovery 服务注册与发现</title>
      <link href="//posts/spring-cloud-nacos-discovery/"/>
      <url>//posts/spring-cloud-nacos-discovery/</url>
      
        <content type="html"><![CDATA[<p><code>Nacos Discovery</code> 是什么？</p><blockquote><p>服务发现是微服务架构体系中最关键的组件之一。</p><p>如果尝试着用手动的方式来给每一个客户端来配置所有服务提供者的服务列表是一件非常困难的事，而且也不利于服务的动态扩缩容。Nacos Discovery 可以帮助用户将服务自动注册到 Nacos 服务端并且能够动态感知和刷新某个服务实例的服务列表。</p><p>除此之外，Nacos Discovery 也将服务实例自身的一些元数据信息，例如 host，port，健康检查URL，主页等-注册到 Nacos 。</p></blockquote><p>关于 Nacos 的安装及启动请查看文章：<a href="https://blog.junmoyu.com/posts/spring-cloud-nacos-discovery/">Spring Cloud Alibaba：Nacos 安装及使用</a></p><p>本篇将详细介绍 <code>Nacos Discovery</code> 服务注册与发现的一些技术实践。</p><span id="more"></span><h2 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>启动好 Nacos 服务端。然后在项目中添加依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个完整的 <code>pom.xml</code> 的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xingtuai.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nacos-discovery-test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：在本项目的源代码中，依赖统一使用 <code>dependencies</code> 模块管理，且其中 <code>dependencyManagement</code> 节点也在  <code>dependencies</code> 模块中配置，上例仅演示必要的配置项，在项目源代码中有些许区别。</p></blockquote><h3 id="启动-Provider-服务提供者"><a href="#启动-Provider-服务提供者" class="headerlink" title="启动 Provider 服务提供者"></a>启动 Provider 服务提供者</h3><p>Nacos Discovery 服务注册与发现中，一般有两个角色，一个是 Provider 服务提供者，一个是 Consumer 服务消费者。他们都需要将自身注册到 Naocs 中，这一步叫服务注册。服务提供者向外提供服务，服务消费者通过各种方式调用服务提供者完成业务功能。且一个服务，既可以作为提供者，同时也可以作为消费者。</p><p><strong>1. 配置 application.yml</strong></p><p>要使用 Nacos ，需要在 <code>application.yml</code> 或者 <code>bootstrap.yml</code> 中配置一些基本参数。如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nacos 相关参数</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.17</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="comment"># 命名空间，用作环境隔离</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">904174a3-d51f-43ed-a456-c4fd7386ecb3</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-discovery-provider</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 权限认证，nacos.core.auth.enabled=true 时需要添加</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;nacos.username&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;nacos.password&#125;</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.server-addr&#125;</span></span><br><span class="line">        <span class="comment"># 命名空间，用作环境隔离</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace&#125;</span></span><br><span class="line">        <span class="comment"># 分组，一般按照项目进行分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">        <span class="comment"># 自定义元数据</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="comment"># 版本</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">1.0</span></span><br><span class="line">          <span class="comment"># 地域</span></span><br><span class="line">          <span class="attr">region:</span> <span class="string">hangzhou</span></span><br></pre></td></tr></table></figure><p>上述配置比较完善，如果需要简化配置，则如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-discovery-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.17</span><span class="string">:8848</span> </span><br></pre></td></tr></table></figure><p><strong>2. 开启服务发现</strong></p><p>在项目启动类上添加注解 <code>@EnableDiscoveryClient</code> 即可。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosDiscoveryProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3. 创建 REST 接口</strong></p><p>服务提供者需要提供接口以供消费者进行调用，一般使用 RESTful 风格的 HTTP 接口。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Nacos Discovery &quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 验证</strong></p><p>启动 Provider 服务提供者后，打开 Nacos 控制台，可以看到服务已经注册上去了，因为我使用的是 <code>dev</code> 开发环境的命名空间，所以服务注册在 <code>dev</code> 的命名空间内。</p><p><img src="https://i.loli.net/2020/10/12/gr9CY7XKS83iJ1q.jpg"></p><h3 id="启动-Consumer-服务消费者"><a href="#启动-Consumer-服务消费者" class="headerlink" title="启动 Consumer 服务消费者"></a>启动 Consumer 服务消费者</h3><p>Consumer 服务消费者的依赖的配置基本与 Provider 服务提供者相同，但是却要比它更复杂一点。因为在 Consumer 端需要去调用 Provider 端的 REST 服务。而调用方式也有很多种。</p><p><strong>1. RestTemplate 方式</strong></p><p>依赖、配置与 Provider 一致。</p><p>然后创建 <code>RestTemplate</code> 配置类。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用 Provider 服务提供者。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echoAppName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问</span></span><br><span class="line">        <span class="comment">// LoadBalanceClient 提供负载均衡的功能，并从 Nacos 中根据服务名获取服务实例</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancerClient.choose(<span class="string">&quot;nacos-discovery-provider&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(<span class="string">&quot;http://%s:%s/echo/%s&quot;</span>, serviceInstance.getHost(), serviceInstance.getPort(), appName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;request url: &#123;&#125;&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，打开浏览器请求：<a href="http://localhost:8080/echo">http://localhost:8080/echo</a></p><p>查看返回结果进行验证。</p><p><strong>2. Feign 方式</strong></p><p>首先需要添加 <code>Feign</code> 的依赖，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Feign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完依赖以后，需要在项目启动类中添加 <code>@EnableFeignClients</code> 注解以开启功能。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosDiscoveryConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>然后需要创建一个接口类 <code>FeignService</code>，在类中为 Provider 服务提供者提供的服务接口提供对应的访问方法。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos-discovery-provider 为服务提供者的服务名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;nacos-discovery-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口定义</span></span><br><span class="line"><span class="comment">     * Provider 服务提供者对应的 REST 接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Controller 中调用 <code>FeignService</code> 接口实现对 Provider 端的调用。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xingtuai.cloud.nacos.discovery.service.FeignService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FeignService feignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echoAppName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> feignService.echo(appName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，打开浏览器请求：<a href="http://localhost:8080/feign/echo">http://localhost:8080/feign/echo</a></p><p>查看返回结果进行验证。</p><h2 id="多环境隔离"><a href="#多环境隔离" class="headerlink" title="多环境隔离"></a>多环境隔离</h2><p><code>Nacos Discovery</code> 与 <code>Nacos Config</code> 的环境隔离是一样的，都是通过命名空间 <code>namespace</code> 进行区分。</p><p>具体请参考之前的文章：<a href="https://blog.junmoyu.com/posts/spring-cloud-nacos-config/">Spring Cloud Alibaba：Nacos Config 配置中心</a></p><p>在实际开发中，通过这种方式可以非常好的对各种环境进行隔离区分，避免服务管理的混乱。</p><h2 id="结合-Sentinel-熔断"><a href="#结合-Sentinel-熔断" class="headerlink" title="结合 Sentinel 熔断"></a>结合 Sentinel 熔断</h2><p><code>Sentinel</code> 是阿里微服务生态中一个比较重要的组件，功能也比较多，在此仅简单介绍。后续会有专题对其进行详细的研究实践。</p><p>此处结合，主要是在 Feign 调用的时候，进行处理。在调用失败时，可以进行熔断。</p><p>首先需要添加依赖，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>application.yml</code> 中进行配置，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.17</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">904174a3-d51f-43ed-a456-c4fd7386ecb3</span></span><br><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.17</span><span class="string">:8883</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-discovery-sentinel</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 权限认证，nacos.core.auth.enabled=true 时需要添加</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;nacos.username&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;nacos.password&#125;</span></span><br><span class="line">      <span class="comment"># Nacos 服务注册与发现</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.server-addr&#125;</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">    <span class="comment"># Spring Cloud Alibaba Sentinel 配置</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># Sentinel 控制台</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">$&#123;sentinel.dashboard&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment"># 开启 feign 对 sentinel 的支持</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>创建一个 <code>FeignService</code> 接口方法失败时的回调类 <code>FeignServiceFallback</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">FeignService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;echo fallback, please try again.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>echo(String message)</code> 方法失败时，将会进入此回调，返回你需要的数据格式。</p><p>除此之外还需要创建一个配置类 <code>FeignConfig</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xingtuai.cloud.nacos.discovery.service.fallback.FeignServiceFallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FeignServiceFallback <span class="title function_">feignServiceFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FeignServiceFallback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要改造一下 <code>FeignService</code> 接口，将 <code>FeignServiceFallback</code> 及 <code>FeignConfig</code> 设置在注解 <code>@FeignClient</code> 中，改造如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos-discovery-provider 为服务提供者的服务名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-discovery-provider&quot;, fallback = FeignServiceFallback.class, configuration = FeignConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口定义</span></span><br><span class="line"><span class="comment">     * Provider 服务提供者对应的 REST 接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常访问时，接口将返回正常的数据，但是当接口出现异常，比如服务提供者下线了，访问失败的话。那么将会调用 <code>FeignServiceFallback</code> 中的 <code>echo(String message)</code> 方法并返回。这样就避免返回异常，而是返回一个可控的数据，可以用做服务熔断。</p><p>Sentinel 相关的知识与实践还有很多，后续会做专题分享，在此不再赘述。</p><h2 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h2><p><a href="https://github.com/moyu-jun/spring-cloud-example/tree/master/nacos/nacos-discovery">GitHub - spring-cloud-example</a></p>]]></content>
      
      
      <categories>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring-cloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba：Nacos Config 配置中心</title>
      <link href="//posts/spring-cloud-nacos-config/"/>
      <url>//posts/spring-cloud-nacos-config/</url>
      
        <content type="html"><![CDATA[<p><code>Nacos Config</code> 是什么？</p><blockquote><p>Nacos 提供用于存储配置和其他元数据的 key&#x2F;value 存储，为分布式系统中的外部化配置提供服务器端和客户端支持。使用 Spring Cloud Alibaba Nacos Config，您可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置。</p><p> Spring Cloud Alibaba Nacos Config 是 Config Server 和 Client 的替代方案，客户端和服务器上的概念与 Spring Environment 和 PropertySource 有着一致的抽象，在特殊的 bootstrap 阶段，配置被加载到 Spring 环境中。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容。</p></blockquote><p>在了解 <code>Nacos Config</code> 之前，如有需要可以先看下上一篇文章: <a href="https://blog.junmoyu.com/posts/spring-cloud-nacos-install/">Spring Cloud Alibaba：Nacos 安装及使用</a>。</p><p>本篇将详细介绍 <code>Nacos Config</code> 配置中心的一些技术实践。</p><span id="more"></span><h2 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h2><p><strong>1. Nacos 服务端添加配置</strong></p><p>先安装好 Nacos Server ，然后启动。安装方式可以参考 <a href="https://blog.junmoyu.com/posts/spring-cloud-nacos-install/">Spring Cloud Alibaba：Nacos 安装及使用</a>。</p><p>在 <strong>配置管理</strong> - <strong>配置列表</strong> 中添加一个配置。如下图所示：</p><p><img src="https://i.loli.net/2020/09/29/TEyY87BkrXqtbeH.jpg"></p><p>编辑好之后点击发布即可。</p><ul><li>Data ID : 一般为应用名称，对应 Spring Boot 项目中的 <code>spring.application.name</code> 参数</li><li>Group : 组，一般用来区分项目，此处直接用默认的公共组，后续会详细说明</li><li>配置格式: 一般默认为 <strong>Properties</strong> 格式，你可以根据自己的喜好去切换。</li></ul><p><strong>2. 客户端使用</strong></p><p>以 Spring Boot 项目为例。先添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>resource</code> 文件夹中创建配置文件 <code>bootstrap.yml</code> 来配置 Nacos Server 相关的参数，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-base</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 权限认证，nacos.core.auth.enabled=true 时需要添加</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">James2020+</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># nacos config 的开关</span></span><br><span class="line"><span class="comment">#        enabled: false</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">nacos-config-base</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure><p>创建启动类 <code>NacosConfigBaseApplication</code> ，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConfigBaseApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(NacosConfigBaseApplication.class, args);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 当动态配置刷新时，会更新到 Enviroment 中，因此这里每隔一秒中从 Enviroment 中获取配置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;base.name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userAge</span> <span class="operator">=</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;base.age&quot;</span>);</span><br><span class="line">            System.err.println(<span class="string">&quot;name :&quot;</span> + userName + <span class="string">&quot;; age: &quot;</span> + userAge);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是每隔一秒，获取一次 <code>base.name</code> 与 <code>base.age</code> 参数并打印。</p><p> <code>applicationContext.getEnvironment().getProperty(&quot;base.age&quot;);</code> 这是获取参数的一种方式。还可以用过注解来获取。</p><p>将启动类的代码注释掉，创建一个 <code>TestController </code> 类，添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;base.name&#125;&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;base.age&#125;&quot;)</span></span><br><span class="line">    String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/age&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以把 Nacos Config 中配置的参数，当成本地参数一样，使用 <code>@Value(&quot;$&#123;&#125;&quot;)</code>注解来获取。同时加上 <code>@RefreshScope</code> 注解以保证可以实时更新。</p><h2 id="多环境隔离"><a href="#多环境隔离" class="headerlink" title="多环境隔离"></a>多环境隔离</h2><p>日常开发中，我们常常会有开发环境，测试环境，预发布环境，生产环境等等。为了更好的区别这些环境，且防止配置混乱。官方及我个人都非常推荐使用 namespace 进行环境隔离。</p><blockquote><p>注：Nacos Config 支持 profile 粒度的环境区分，但个人不建议这么使用。使用 namespace 做环境隔离更彻底更安全，也更易于管理。</p></blockquote><h3 id="namespace-概念"><a href="#namespace-概念" class="headerlink" title="namespace 概念"></a>namespace 概念</h3><p>这里引用官方的概念说明：</p><blockquote><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p></blockquote><h3 id="namaspace-创建"><a href="#namaspace-创建" class="headerlink" title="namaspace 创建"></a>namaspace 创建</h3><p>打开 Nacos 控制台，在 <strong>命名空间</strong> 中可以对其进行管理，如下图所示。</p><p><img src="https://i.loli.net/2020/09/29/hfGVX5Sn9FaueK2.jpg"></p><p>要注意的是，在项目中如果要指定命名空间，是通过 <code>命名空间ID</code>的，而不是通过名称。</p><p>配置好了命名空间后，再打开配置列表，则可以在上方看到目前所有的命名空间。不同的命名空间可以允许存在相同 Data ID 的配置。</p><p><img src="https://i.loli.net/2020/09/29/i4WzafxEIw2egNj.jpg"></p><p>namespace 在代码中的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 这里使用的是命名空间 ID </span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">904174a3-d51f-43ed-a456-c4fd7386ecb3</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Group"><a href="#自定义-Group" class="headerlink" title="自定义 Group"></a>自定义 Group</h3><p>一般我们会使用 namespace 区分环境，使用 Group 来区分项目，使用 Data ID 区分配置。以此来管理多项目，多环境下的配置文件。</p><p>Group 一般没有指定的话，默认为 DEFAULT_GROUP 。如果需要自定义的话，在 Nacos 控制台，创建配置文件的时候自定义即可。在代码中写法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br></pre></td></tr></table></figure><h3 id="项目配置实践"><a href="#项目配置实践" class="headerlink" title="项目配置实践"></a>项目配置实践</h3><p>在项目实际配置中，个人建议如下按照如下方式进行配置。</p><p>首先，配置文件要按照如下方式建立：</p><ul><li>application.yml          : 存储一些不需要放在 Nacos Config 的配置</li><li>bootstrap.yml            : 基础配置，配置 Nacos Config 的基础配置</li><li>bootstrap-dev.yml     : 环境参数，开发环境</li><li>bootstrap-test.yml     : 环境参数，测试环境</li><li>bootstrap-prod.yml   : 环境参数，线上环境</li></ul><p>配置内容分别如下：</p><p><strong>bootstrap-dev.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="comment"># 开发环境的 namespace ID</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">904174a3-d51f-43ed-a456-c4fd7386ecb3</span></span><br></pre></td></tr></table></figure><p><strong>bootstrap-test.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="comment"># 测试环境的 namespace ID</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">a463038a-525b-4ad0-988e-ec71ff043c22</span></span><br></pre></td></tr></table></figure><p><strong>bootstrap-prod.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">100.100</span><span class="number">.10</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="comment"># 生产环境的 namespace ID</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">0d84f533-74ca-4ca5-9dd8-01e8866cd0c4</span></span><br></pre></td></tr></table></figure><p><strong>bootstrap.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-advanced</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 权限认证，nacos.core.auth.enabled=true 时需要添加</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;nacos.username&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;nacos.password&#125;</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.server-addr&#125;</span></span><br><span class="line">          <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace&#125;</span></span><br><span class="line">          <span class="attr">prefix:</span> <span class="string">nacos-config-base</span></span><br><span class="line">          <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br></pre></td></tr></table></figure><h2 id="共享配置-多配置文件"><a href="#共享配置-多配置文件" class="headerlink" title="共享配置 &amp; 多配置文件"></a>共享配置 &amp; 多配置文件</h2><p>日常开发中，多个模块可能会有很多共用的配置，比如数据库连接信息，Redis 连接信息，RabbitMQ 连接信息，监控配置等等。</p><p>那么此时，我们就希望可以加载多个配置，多个项目共享同一个配置之类等功能。Nacos Config 也确实支持。</p><p>我们可以使用 <code>spring.cloud.nacos.config.shared-configs</code> 和 <code>spring.cloud.nacos.config.extension-configs</code> 两个参数节点来配置。</p><p>配置实例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-multi</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;nacos.username&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;nacos.password&#125;</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.server-addr&#125;</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace&#125;</span></span><br><span class="line">        <span class="comment"># 用于共享的配置文件</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common-mysql.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">            </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common-redis.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">            </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common-base.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 常规配置文件</span></span><br><span class="line">        <span class="comment"># 优先级大于 shared-configs，在 shared-configs 之后加载</span></span><br><span class="line">        <span class="attr">extension-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">nacos-config-advanced.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">nacos-config-base.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">SPRING_CLOUD_EXAMPLE_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>参数解析：</p><ul><li>data-id : Data Id</li><li>group：自定义 Data Id 所在的组，不明确配置的话，默认是 DEFAULT_GROUP。</li><li>refresh: 控制该 Data Id 在配置变更时，是否支持应用中可动态刷新， 感知到最新的配置值。默认是不支持的。</li></ul><blockquote><p>这里的Data ID 需要注意，后面是加 <code>.yaml</code> 后缀的，且不需要指定 <code>file-extension</code>。这个有一个小坑，那就是在 Nacos 控制台添加配置文件时，Data ID 的命名就要是 <code>common-mysql.yaml</code> 这种带后缀的。且后缀名要和配置类型想匹配，否则将会读取不到配置。</p></blockquote><p>具体配置如下图所示，可与之前章节的配置对比下，之前章节的 Data ID 是没有带后缀的。</p><p><img src="https://i.loli.net/2020/09/29/FIZ9EW12OaelJyv.jpg"></p><p>关于多配置文件的优先级问题：</p><ol><li>后加载的优先级高；</li><li>extension-configs 优先级大于 shared-configs，因为在 shared-configs 之后加载</li><li>shared-configs 与 extension-configs 的配置列表中，在下面的配置优先级高。</li></ol><h2 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h2><p><a href="https://github.com/moyu-jun/spring-cloud-example">GitHub - spring-cloud-example</a></p>]]></content>
      
      
      <categories>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring-cloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba：Nacos 安装及使用</title>
      <link href="//posts/spring-cloud-nacos-install/"/>
      <url>//posts/spring-cloud-nacos-install/</url>
      
        <content type="html"><![CDATA[<p>Nacos 是什么？</p><blockquote><p>Nacos 致力于帮助开发者发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助开发者快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助开发者更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><p><code>Nacos</code> 主要包含两个部分，一个是配置中心，一个是服务注册与发现。本系列的文章将依次对其进行分享介绍。</p><p>本篇将着重介绍 <code>Nacos</code> 的单机与集群安装及一些基本的使用。</p><span id="more"></span><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul><li>Windows: win 10 64位系统</li><li>Linux: Centos 7 64位系统</li><li>Nacos: 1.3.2 (当前最新稳定版本)</li></ul><h2 id="Windows-单机安装"><a href="#Windows-单机安装" class="headerlink" title="Windows 单机安装"></a>Windows 单机安装</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><p>前往 <a href="https://github.com/alibaba/nacos/releases/tag/1.3.2">GitHub Nacos Release</a> 下载 <code>nacos-server-1.3.2.zip</code> 软件包到本地。</p><p>本地解压，目录结构如下图所示。</p><p><img src="https://i.loli.net/2020/09/29/d43bpXsuAI9PEQw.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin    : 启动/关闭脚本</span><br><span class="line">conf   : Nacos 的配置文件</span><br><span class="line">data   : 未做持久化的时候数据会存储在此，比如配置数据(第一次运行后才会生成)</span><br><span class="line">logs   : Nacos 日志(第一次运行后才会生成)</span><br><span class="line">target : nacos-server.jar 运行文件</span><br></pre></td></tr></table></figure><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>打开文件 <code>conf/application.properties</code> 文件，对 nacos 进行配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 配置网页端访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8848</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 配置数据持久化的数据库，这里使用 mysql</span></span><br><span class="line"><span class="comment">### 这里的配置默认是注释掉的，需要手动去除注释</span></span><br><span class="line"><span class="comment">### 如果需要启用数据库的话，需要导入 conf/nacos-mysql.sql 脚本</span></span><br><span class="line"><span class="comment">### 如果不启用数据库，则数据将持久化到本地 data/ 目录下</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 数据库可以有多个，db.url.0=xxx db.url.1=xxx db.url.2=xxx</span></span><br><span class="line"><span class="comment">### 此处仅使用一个</span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 打开认证授权系统，默认为 false </span></span><br><span class="line"><span class="comment">### 此项配置并不会影响网页端的登录，设置为 true 或是 false 网页端访问时均需要登录</span></span><br><span class="line"><span class="comment">### 此项配置开启的话，在代码中需要配置 nacos 的用户名及密码</span></span><br><span class="line"><span class="comment">### 即 spring.cloud.nacos.username 和 spring.cloud.nacos.password 两个参数，对应的是网页端登录的用户名密码</span></span><br><span class="line"><span class="comment">### If turn on auth system:</span></span><br><span class="line"><span class="attr">nacos.core.auth.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 其他配置根据自己的需求配置即可</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: </p><ul><li>如需启用数据库，需要导入 conf&#x2F;nacos-mysql.sql 脚本！</li><li>如需开启认证授权，需要在项目代码中配置用户名密码，否则会访问失败！</li><li>数据库的版本要在 5.7 以上，否则会出现异常！</li></ul></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动脚本在 <code>bin/</code> 目录下，windows 下使用 <code>shutdown.cmd</code> 与 <code>startup.cmd</code> 两个脚本。</p><p><code>nacos 1.3.2</code> 的脚本有个小改动，默认启动模式为 <code>cluster</code> 集群模式，所以要单机启动的话，有两种方案。</p><ol><li>带参数运行</li></ol><p>创建脚本文件 <code>startup-standalone.cmd</code>，添加以下代码到文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>然后双击启动 <code>startup-standalone.cmd</code> 脚本即可。或者每次启动时使用 <code>startup.cmd -m standalone</code> 命令启动。</p><p>个人认为写个 <code>startup-standalone.cmd</code> 脚本更方便。</p><ol start="2"><li>修改原有的脚本</li></ol><p>使用编辑器打开脚本文件 <code>bin/startup.cmd</code>，找到大概 27 行，按照下方代码编辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 原本的代码</span></span></span><br><span class="line">set MODE=&quot;cluster&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改后的代码</span></span></span><br><span class="line">set MODE=&quot;standalone&quot;</span><br></pre></td></tr></table></figure><p>修改后保存，然后直接运行 <code>bin/startup.cmd</code> 脚本即可。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>双击 <code>bin/startup.cmd</code> 或 <code>bin/startup-standalone.cmd</code> 脚本，单机运行，运行成功则如下图所示。</p><p><img src="https://i.loli.net/2020/09/29/xAaSQb7dCZ5WV3s.png"></p><p>可以看到启动的端口号，以及启动模式为 <code>stand alone mode</code> 单机模式，使用了外部存储（mysql）。</p><p>浏览器中打开链接: <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 访问 Nacos。</p><p>输入用户名（默认为nacos）密码（默认为nacos），进入首页如下图所示。</p><p><img src="https://i.loli.net/2020/09/29/1fU4xwnzeMCKBWt.png" alt="nacos-web-index.png"></p><p>具体的使用下章细说。注意登录成功后要修改密码，不要使用默认密码。</p><h2 id="Linux-单机安装"><a href="#Linux-单机安装" class="headerlink" title="Linux 单机安装"></a>Linux 单机安装</h2><h3 id="下载软件包-1"><a href="#下载软件包-1" class="headerlink" title="下载软件包"></a>下载软件包</h3><p>前往 <a href="https://github.com/alibaba/nacos/releases/tag/1.3.2">GitHub Nacos Release</a> 下载 <code>nacos-server-1.3.2.tar.gz</code> 软件包到本地。</p><p>然后使用命令解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用 wget 下载的比较慢的话，可以在 windows 下载，然后传输到 linux 上。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">而且 .zip 和 .tar.gz 两个包仅是压缩方式不同，里面的文件是一样的，两个包都可以使用。</span></span><br><span class="line">wget https://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议自己创建一个 nacos 应用目录，解压到 nacos 应用目录中，方便管理</span></span><br><span class="line">tar -xvf nacos-server-1.3.2.tar.gz</span><br></pre></td></tr></table></figure><p>目录结构与 windows 中的一致，不再赘述。</p><h3 id="参数配置-1"><a href="#参数配置-1" class="headerlink" title="参数配置"></a>参数配置</h3><p>参数配置也与 windows 中的一致，不再赘述。</p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>启动模式也基本与 windows 一致，只是需要使用 <code>shutdown.sh</code> 与 <code>startup.sh</code> 脚本。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令 - Linux 自动后台运行</span></span><br><span class="line">sh startup.sh -m standalone</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭命令</span></span><br><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure><p>同样，可以创建一个 <code>startup-standalone.sh</code> 脚本来直接启动。具体参考 windows 对应章节，不再赘述。</p><p>Linux 下启动会自动后台运行，运行成功后，如下图所示。</p><p><img src="https://i.loli.net/2020/09/29/iGvBKMHRaUCtJOp.png"></p><p>如需查看启动日志，可以使用下面的命令，日志的结果与 windows 几乎一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志所在路径，如上图最后一句打印日志所示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nacos is starting，you can check the /root/soft/nacos/nacos/logs/start.out</span></span><br><span class="line">tail -300f /root/soft/nacos/nacos/logs/start.out</span><br></pre></td></tr></table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>Linux 系统需要注意防火墙是否开启，是否开启了 <code>8848</code> 端口或是自定义的端口。如果是阿里云或其他云服务器，同样需要记得开启端口，否则无法访问。</p><p>其他均与 windows 相同，不再赘述。</p><h2 id="Docker-单机安装"><a href="#Docker-单机安装" class="headerlink" title="Docker 单机安装"></a>Docker 单机安装</h2><blockquote><p>阅读此章节，默认已了解 <code>Docker </code> 的基础知识，不了解请先学习一下 <code>Docker </code>的基本知识。</p></blockquote><p>Docker 下的安装有两种，一种是官方的 <a href="https://github.com/nacos-group/nacos-docker">nacos-docker</a> 仓库示例。一种自己编写 <code>docker-compose</code> 进行自定义部署。</p><h3 id="nacos-docker-官方示例"><a href="#nacos-docker-官方示例" class="headerlink" title="nacos-docker 官方示例"></a><a href="https://github.com/nacos-group/nacos-docker">nacos-docker</a> 官方示例</h3><p>按照下面的命令进行部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆项目</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--depth 1 表示只克隆最近的一次 commit，这样下载的数据量最小</span></span><br><span class="line">git clone --depth 1 https://github.com/nacos-group/nacos-docker.git</span><br><span class="line">cd nacos-docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单机 MySQL 模式</span></span><br><span class="line">docker-compose -f example/standalone-mysql.yaml up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群模式</span></span><br><span class="line">docker-compose -f example/cluster-hostname.yaml up -d</span><br></pre></td></tr></table></figure><p>此种方式，单机模式，将创建四个容器 <code>nacos-server</code>、<code>mysql</code>、<code>prometheus</code>和<code>grafana</code>。</p><p> 对于我个人而言，我有自己的数据库，没必要再额外创建一个 mysql，另外 <code>prometheus</code> 和 <code>grafana</code> 的监控我也咱不需要。使用这种方式，比较占用服务器的资源。</p><p> 对于仅需要 nacos 功能的用户来说，自定义部署可能更加方便。如果想要懒人部署，或者有监控需要，可以使用这种部署方式。另外，官方的部署文件及配置很有参考价值。</p><h3 id="自定义部署"><a href="#自定义部署" class="headerlink" title="自定义部署"></a>自定义部署</h3><p>创建一个 <code>docker-compose.yaml</code> 文件，将下列配置添加到文件中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:1.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-server</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">nacos-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8848</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs/:/home/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MODE=standalone&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;SPRING_DATASOURCE_PLATFORM=mysql&quot;</span></span><br><span class="line">      <span class="comment"># 使用你自己的数据库连接信息</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_SERVICE_HOST=127.0.0.1&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_SERVICE_PORT=3306&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_SERVICE_USER=username&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_SERVICE_PASSWORD=password&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_SERVICE_DB_NAME=nacos&quot;</span></span><br><span class="line">      <span class="comment"># 开启认证系统</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;NACOS_AUTH_ENABLE=true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">dev:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Nacos Docker 环境变量：</p><table><thead><tr><th>名称</th><th>描述</th><th>选项</th></tr></thead><tbody><tr><td>MODE</td><td>cluster&#x2F;standalone</td><td>cluster&#x2F;standalone default <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>nacos cluster address</td><td>eg. ip1:port1 ip2:port2 ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>是否支持 hostname</td><td>hostname&#x2F;ip default <strong>ip</strong></td></tr><tr><td>NACOS_APPLICATION_PORT</td><td>nacos server port</td><td>default <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>当有多网络的时候自定义nacos server ip</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>standalone support mysql</td><td>mysql &#x2F; empty default empty</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>mysql host</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>mysql database port</td><td>default : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>mysql database name</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>username of database</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>password of database</td><td></td></tr><tr><td>MYSQL_SSL_ENABLE</td><td>use ssl</td><td>default : false</td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>指定数据库的数量</td><td>default :<strong>1</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>default :2g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>default :2g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>default :1g</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>default :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>default :320m</td></tr><tr><td>NACOS_DEBUG</td><td>enable remote debug</td><td>y&#x2F;n default :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>default :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>认证系统类型，目前仅支持<code>nacos</code></td><td>default :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>是否开启认证系统</td><td>default :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>token 过期时间（以秒为单位）</td><td>default :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>默认 token</td><td>default :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>打开&#x2F;关闭身份验证信息的缓存。通过打开此开关，认证信息的更新将有15秒的延迟。</td><td>default : false</td></tr><tr><td>MEMBER_LIST</td><td>使用配置文件或命令行参数设置集群列表</td><td>eg:192.168.16.101:8847?raft_port&#x3D;8807,192.168.16.101?raft_port&#x3D;8808,192.168.16.101:8849?raft_port&#x3D;8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>集群模式下没有mysql的时候使用 <code>embedded</code> 存储</td><td><code>embedded</code> default : none</td></tr></tbody></table><p>创建 <code>./conf/custom.properties</code> 文件，并添加以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spring.security.enabled=false</span></span><br><span class="line"><span class="comment">#management.security=false</span></span><br><span class="line"><span class="comment">#security.basic.enabled=false</span></span><br><span class="line"><span class="comment">#nacos.security.ignore.urls=/**</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"><span class="comment"># metrics for prometheus</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include=*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># metrics for elastic search</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.enabled=false</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># metrics for influx</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.enabled=false</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.db=springboot</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.uri=http://localhost:8086</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.auto-create-db=true</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.consistency=one</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.compressed=true</span></span><br></pre></td></tr></table></figure><p><code>custom.properties</code> 这个文件一般可能没用，如果你需要上述的参数，可以去到注释并进行设置。</p><p>完成之后，使用下面的命令启动&#x2F;关闭 <code>nacos-server</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志, 也可以直接查看 logs 中的日志</span></span><br><span class="line">docker logs nacos-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 Nacos 容器</span></span><br><span class="line">docker exec -it nacos-server bash</span><br></pre></td></tr></table></figure><h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><p>注意开启端口的访问权限。</p><p>浏览器中打开链接: <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 访问 Nacos 进行验证。</p><h2 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h2><p>集群的安装建立在单机安装的基础上，且 Windows 机器和 Linux 机器并没有什么不同，甚至一部分 Nacos 部署在 Windows 上，一部分部署在 Linux 都可以。</p><p>本节讨论的是如何部署一个生产可用的 Nacos 集群，并使用 MySQL 做数据持久化。</p><h3 id="Nacos-集群部署架构图"><a href="#Nacos-集群部署架构图" class="headerlink" title="Nacos 集群部署架构图"></a>Nacos 集群部署架构图</h3><p><img src="https://i.loli.net/2020/09/29/6cdz3nxAgQoUEpv.jpg"></p><h3 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h3><p>如果是生产环境的话，建议搭建一个高可用的数据库，用来存储 Nacos 的持久化数据。具体搭建步骤不在本章的讨论范畴，不再赘述。</p><p>按照之前单机安装的步骤，创建一个名为 <code>nacos</code> 的数据库，并导入 conf&#x2F;nacos-mysql.sql 脚本生成必要的数据表和数据。</p><h3 id="集群部署规划"><a href="#集群部署规划" class="headerlink" title="集群部署规划"></a>集群部署规划</h3><p>集群部署，其实就是在不同的机器上，每个机器都部署一份 <code>nacos-server</code>，然后编辑 <code>./conf/cluster.conf</code>集群配置文件，把这些机器汇总进去。然后 nacos 会自动选举出 Leader 及 Follower，完成集群的搭建。</p><p>节点分配如下：</p><table><thead><tr><th>实例</th><th>IP</th><th>端口</th></tr></thead><tbody><tr><td>nacos-server-01</td><td>192.168.9.11</td><td>8848</td></tr><tr><td>nacos-server-02</td><td>192.168.9.12</td><td>8848</td></tr><tr><td>nacos-server-03</td><td>192.168.9.13</td><td>8848</td></tr></tbody></table><blockquote><p>需要注意的是，如果是多台机器部署的话，需要保证这几台机器可以相互通信，且端口需要开启。</p></blockquote><h3 id="参数配置-2"><a href="#参数配置-2" class="headerlink" title="参数配置"></a>参数配置</h3><p>首先需要准备一份 <code>nacos-server</code> 安装包，解压，然后编辑 <code>./conf/application.properties</code> ，配置内容与 <strong>Windows 单机安装</strong> - <strong>参数配置</strong> 小节中完全一样。其中数据库修改为上一步准备的数据库即可。</p><p>然后需要复制 <code>./conf/cluster.conf.example</code> 文件并重命名为 <code>cluster.conf</code> ，这个文件就是集群的配置文件了，以后如果需要修改集群节点信息，也是编辑这个文件，比如增减节点等。</p><p>编辑完成后的 <code>cluster.conf</code> 内容对应上面的节点分配，如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多台机器部署集群</span></span><br><span class="line"><span class="comment"># 各节点的 IP 与端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">192.168.9.11</span>:<span class="string">8848</span></span><br><span class="line"><span class="attr">192.168.9.12</span>:<span class="string">8848</span></span><br><span class="line"><span class="attr">192.168.9.13</span>:<span class="string">8848</span></span><br></pre></td></tr></table></figure><p>注意，如果你只是想在一台机器上模拟集群环境的话，那么此文件的配置仅需要修改下 IP 和端口即可。如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单台机器部署集群</span></span><br><span class="line"><span class="comment"># 各节点的 IP 与端口</span></span><br><span class="line"><span class="comment"># IP 相同，端口不同即可</span></span><br><span class="line"></span><br><span class="line"><span class="attr">192.168.9.10</span>:<span class="string">8846</span></span><br><span class="line"><span class="attr">192.168.9.10</span>:<span class="string">8847</span></span><br><span class="line"><span class="attr">192.168.9.10</span>:<span class="string">8848</span></span><br></pre></td></tr></table></figure><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p>编辑好之后，将 <code>nacos-server</code> 安装包，复制三份，分别上传到三台机器上。然后各自执行命令启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令，因为 1.3.2 版本默认集群启动，所以可以直接运行。</span></span><br><span class="line">sh startup.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果要带参数运行也可以，只要是以集群模式启动即可。</span></span><br><span class="line">sh startup.sh -m cluster </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 nacos-server</span></span><br><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><p>三台机器全部启动完成之后，随便访问哪一台机器上的 nacos 均可。</p><p>浏览器打开链接 <a href="http://192.168.9.11:8848/nacos">http://192.168.9.11:8848/nacos</a> 访问 nacos。可以通过 <strong>集群管理</strong> - <strong>节点列表</strong> 来查看集群的情况。如下图所示：</p><p><img src="https://i.loli.net/2020/09/29/E9pKgDmwuCWb1li.jpg"></p><p>同时可以点击右侧的 <strong>节点元数据</strong> 查看节点的详细信息。节点元数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;adWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastRefreshTime&quot;</span><span class="punctuation">:</span> <span class="number">1601363785570</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;naming&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;voteFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.9.17:8846&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.9.17:8846&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;heartbeatDueMs&quot;</span><span class="punctuation">:</span> <span class="number">4500</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;leaderDueMs&quot;</span><span class="punctuation">:</span> <span class="number">19701</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LEADER&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raftPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7846&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknow&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>naming.state</code> 节点参数，指明了此节点为 Leader 节点，其他两个节点为 Follower。</p><h3 id="Nginx-反向代理与负载均衡"><a href="#Nginx-反向代理与负载均衡" class="headerlink" title="Nginx 反向代理与负载均衡"></a>Nginx 反向代理与负载均衡</h3><p>Nginx 的安装不在本章节的讨论范畴内，请自行查阅学习相关的信息。</p><p>打开 Nginx 的配置文件 <code>conf/nginx.conf</code> ，并在 <code>http&#123;&#125;</code> 节点下添加以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">nacos &#123;</span></span><br><span class="line">      <span class="attr">server</span> <span class="string">192.168.9.11:8848;</span></span><br><span class="line">      <span class="attr">server</span> <span class="string">192.168.9.12:8848;</span></span><br><span class="line">      <span class="attr">server</span> <span class="string">192.168.9.13:8848;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # 访问端口</span></span><br><span class="line">      <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line"><span class="comment">      # 自定义域名或者 IP</span></span><br><span class="line"><span class="comment">      # server_name nacos.com;</span></span><br><span class="line">      <span class="attr">server_name</span> <span class="string">192.168.9.10;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">location</span> <span class="string">/nacos/ &#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://nacos/nacos/;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>配置完成后，重新加载 Nginx 配置即可。</p><h3 id="验证-Nginx"><a href="#验证-Nginx" class="headerlink" title="验证 Nginx"></a>验证 Nginx</h3><p>浏览器打开链接 <a href="http://192.168.9.10/nacos">http://192.168.9.10/nacos</a> 访问 nacos。如果正常访问即通过验证。</p>]]></content>
      
      
      <categories>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring-cloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 单例模式中依赖注入问题</title>
      <link href="//posts/spring-boot-singleton-ioc/"/>
      <url>//posts/spring-boot-singleton-ioc/</url>
      
        <content type="html"><![CDATA[<p>在日常项目开发中，单例模式可以说是最常用到的设计模式，项目也常常在单例模式中需要使用 Service 逻辑层的方法来实现某些功能。通常可能会使用 <code>@Resource</code> 或者 <code>@Autowired</code> 来自动注入实例，然而这种方法在单例模式中却会出现 <code>NullPointException</code> 的问题。那么本篇就此问题做一下研究。</p><p><a href="https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-singleton-ioc">演示代码地址</a></p><span id="more"></span><h2 id="问题初探"><a href="#问题初探" class="headerlink" title="问题初探"></a>问题初探</h2><p>一般我们的项目是分层开发的，最经典的可能就是下面这种结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── UserDao -- DAO 层，负责和数据源交互，获取数据。</span><br><span class="line">├── UserService -- 服务逻辑层，负责业务逻辑实现。</span><br><span class="line">└── UserController -- 控制层，负责提供与外界交互的接口。</span><br></pre></td></tr></table></figure><p>此时需要一个单例对象，此对象需要 <code>UserService</code> 来提供用户服务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">UserSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userService) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;UserSingleton userService is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserSingleton Exception: userService is null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个 <code>UserController</code> 来调用 <code>UserSingleton.getUser()</code> 方法看看返回数据是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常方式，在 Controller 自动注入 Service。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  user info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用单例对象中自动注入的 UserService 的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  UserSingleton Exception: userService is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/singleton/ioc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserFromSingletonForIoc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/01/CeAh4WxDYvQUadk.png"></p><p>可以看到，在 <code>UserController</code> 中自动注入 <code>UserService</code> 是可以正常获取到数据的。</p><p><img src="https://i.loli.net/2020/05/01/KgHMt5xhSmPWdl4.png"></p><p>但是如果使用在单例模式中使用自动注入的话，<code>UserService</code> 是一个空的对象。</p><p>所以使用 <code>@Resource</code> 或者 <code>@Autowired</code> 注解的方式在单例中获取 <code>UserService</code> 的对象实例是不行的。如果没有做空值判断，会报 <code>NullPointException</code> 异常。</p><h2 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h2><p>之所以在单例模式中无法使用自动依赖注入，是因为单例对象使用 <code>static</code> 标记，<code>INSTANCE</code> 是一个静态对象，而静态对象的加载是要优先于 Spring 容器的。所以在这里无法使用自动依赖注入。</p><h2 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h2><p>解决这种问题，其实也很简单，只要不使用自动依赖注入就好了，在 <code>new UserSingleton()</code> 初始化对象的时候，手动实例化 <code>UserService</code> 就可以了嘛。但是这种方法可能会有一个坑，或者说只能在某些情况下可以实现。先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了和上面自动依赖注入的对象做区分。</span></span><br><span class="line">    <span class="comment">// 这里加上 ForNew 的后缀代表这是通过 new Object()创建出来的</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceForNew;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        userServiceForNew = <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">UserSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userService) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;UserSingleton userService is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserSingleton Exception: userService is null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserForNew</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userServiceForNew) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;UserSingleton userService is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserSingleton Exception: userService is null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userServiceForNew.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <code>UserService</code> 的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  <span class="doctag">@link</span>&#123;String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息，从 DAO 层获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getUserForDao</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user info&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserForDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == userDao)&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;UserServiceImpl Exception: userDao is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserServiceImpl Exception: userDao is null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userDao.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个 <code>UserController</code> 调用单例中的方法做下验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常方式，在 Controller 自动注入 Service。</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中自动注入的 UserService 的方法</span></span><br><span class="line">    <span class="comment">// 返回值是: UserSingleton Exception: userService is null</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/singleton/ioc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserFromSingletonForIoc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中手动实例化的 UserService 的方法</span></span><br><span class="line">    <span class="comment">// 返回值是: user info</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/singleton/new&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserFromSingletonForNew</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUserForNew();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中手动实例化的 UserService 的方法，在 UserService 中，通过 DAO 获取数据</span></span><br><span class="line">    <span class="comment">// 返回值是: UserServiceImpl Exception: userDao is null</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/singleton/new/dao&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserFromSingletonForNewFromDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUserForNewFromDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现，通过手动实例化的方式是可以一定程度上解决问题的。但是当 UserService 中也使用自动依赖注入，比如 <code>@Resource private UserDao userDao;</code>，并且单例中使用的方法有用到 <code>userDao</code> 就会发现 <code>userDao</code> 是个空的对象。</p><p>也就是说虽然在单例对象中手动实例化了 <code>UserService</code> ，但 <code>UserService</code> 中的 <code>UserDao</code> 却无法自动注入。其原因其实与单例中无法自动注入 <code>UserService</code> 是一样的。所以说这种方法只能一定程度上解决问题。</p><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>我们可以创建一个工具类实现 <code>ApplicationContextAware</code> 接口，用来获取 <code>ApplicationContext</code> 上下文对象，然后通过 <code>ApplicationContext.getBean()</code> 来动态的获取实例。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring 工具类，用来动态获取 bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> James</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 ApplicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后改造下我们的单例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加上 ForTool 后缀来和之前两种方式创建的对象作区分。</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceForTool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        userServiceForTool = SpringContextUtils.getBean(UserService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">UserSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SpringContextUtils 获取的 UserService 对象，并从 UserDao 中获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserForToolFromDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userServiceForTool) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;UserSingleton userService is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserSingleton Exception: userService is null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userServiceForTool.getUserForDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>UserController</code> 中进行测试，看一下结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用 SpringContextUtils 获取的的 UserService 的方法，在 UserService 中，通过 DAO 获取数据</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>  user info for dao</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/user/singleton/tool/dao&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUserFromSingletonForToolFromDao</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> UserSingleton.getInstance().getUserForToolFromDao();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口，返回结果是：<code>user info for dao</code>，验证通过。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-singleton-ioc">本文源码地址</a></p><p>欢迎关注本人 github 中的 <code>spring-boot-example</code> 和 <code>spring-cloud-example</code> 项目，为您提供更多的 <strong>spring boot</strong> 及 <strong>spring cloud</strong> 教程及样例代码。博主会在空闲时间持续更新相关的文档。</p><p><a href="https://github.com/moyu-jun/spring-boot-example">spring-boot-example</a></p><p><a href="https://github.com/moyu-jun/spring-cloud-example">spring-cloud-example</a></p>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> singleton </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 文件上传与下载</title>
      <link href="//posts/spring-boot-file-upload-download/"/>
      <url>//posts/spring-boot-file-upload-download/</url>
      
        <content type="html"><![CDATA[<p>文件的上传及下载功能是开发人员在日常应用及编程开发中经常会遇到的。正好最近开发需要用到此功能，虽然本人是 Android 开发人员，但还是业余客串了一下后台开发。</p><p>在本文中，您将学习如何使用 Spring Boot 实现 Web 服务中的文件上传和下载功能。首先会构建一个 REST APIs 实现上传及下载的功能，然后使用 Postman 工具来测试这些接口，最后创建一个 Web 界面使用 JavaScript 调用接口演示完整的功能。最终界面及功能如下：</p><p><img src="https://i.loli.net/2019/03/29/5c9e3f3eeb13c.png"></p><span id="more"></span><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><pre><code>- Spring Boot : 2.1.3.RELEASE- Gredle : 5.2.1- Java : 1.8- Intellij IDEA : 2018.3.3</code></pre><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>开发环境为 Intellij IDEA，项目创建很简单，按照下面的步骤创建即可：</p><ol><li>File -&gt; New -&gt; Project…</li><li>选择 <strong>Spring Initializr</strong>，点击 Next</li><li>填写 Group (项目域名) 和 Artifact (项目别名)</li><li>构建类型可以选择 Maven 或 Gradle， 看个人习惯</li><li>添加 <strong>Web</strong> 依赖</li><li>输入项目名称及保存路径，完成创建</li></ol><p>项目创建完毕之后就可以进行开发，项目的完整结构如下图所示：</p><p><img src="https://i.loli.net/2019/03/30/5c9e436fee3ca.png"></p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>项目创建完成之后，需要设置一些必要的参数，打开项目<code>resources</code>目录下配置文件<code>application.properties</code>，在其中添加以下参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br><span class="line"></span><br><span class="line">## MULTIPART (MultipartProperties)</span><br><span class="line"># 开启 multipart 上传功能</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 文件写入磁盘的阈值</span><br><span class="line">spring.servlet.multipart.file-size-threshold=2KB</span><br><span class="line"># 最大文件大小</span><br><span class="line">spring.servlet.multipart.max-file-size=200MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=215MB</span><br><span class="line"></span><br><span class="line">## 文件存储所需参数</span><br><span class="line"># 所有通过 REST APIs 上传的文件都将存储在此目录下</span><br><span class="line">file.upload-dir=./uploads</span><br></pre></td></tr></table></figure><p>其中<code>file.upload-dir=./uploads</code>参数为自定义的参数，创建<code>FileProperties.java</code>POJO类，使配置参数可以自动绑定到POJO类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadDir</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadDir</span><span class="params">(String uploadDir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uploadDir = uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>@SpringBootApplication</code>注解的类中添加<code>@EnableConfigurationProperties</code>注解以开启<code>ConfigurationProperties</code>功能。</p><p><code>SpringBootFileApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;</span></span><br><span class="line"><span class="meta">        FileProperties.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootFileApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootFileApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，以后若有<code>file</code>前缀开头的参数需要配置，可直接在<code>application.properties</code>配置文件中配置并更新<code>FileProperties.java</code>即可。</p><p>另外再创建一个上传文件成功之后的<code>Response</code>响应实体类<code>UploadFileResponse.java</code>及异常类<code>FileException.java</code>来处理异常信息。</p><p><code>UploadFileResponse.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileResponse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> String fileDownloadUri;</span><br><span class="line">    <span class="keyword">private</span> String fileType;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UploadFileResponse</span><span class="params">(String fileName, String fileDownloadUri, String fileType, <span class="type">long</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        <span class="built_in">this</span>.fileDownloadUri = fileDownloadUri;</span><br><span class="line">        <span class="built_in">this</span>.fileType = fileType;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter and setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileException.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h2><p>下面需要创建文件上传下载所需的 REST APIs 接口。创建文件<code>FileController.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.dto.UploadFileResponse;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.service.FileService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(FileController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UploadFileResponse <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileService.storeFile(file);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileDownloadUri</span> <span class="operator">=</span> ServletUriComponentsBuilder.fromCurrentContextPath()</span><br><span class="line">                .path(<span class="string">&quot;/downloadFile/&quot;</span>)</span><br><span class="line">                .path(fileName)</span><br><span class="line">                .toUriString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UploadFileResponse</span>(fileName, fileDownloadUri,</span><br><span class="line">                file.getContentType(), file.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadMultipleFiles&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UploadFileResponse&gt; <span class="title function_">uploadMultipleFiles</span><span class="params">(<span class="meta">@RequestParam(&quot;files&quot;)</span> MultipartFile[] files)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(files)</span><br><span class="line">                .map(<span class="built_in">this</span>::uploadFile)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/downloadFile/&#123;fileName:.+&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title function_">downloadFile</span><span class="params">(<span class="meta">@PathVariable</span> String fileName, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// Load file as Resource</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> fileService.loadFileAsResource(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try to determine file&#x27;s content type</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Could not determine file type.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fallback to the default content type if type could not be determined</span></span><br><span class="line">        <span class="keyword">if</span>(contentType == <span class="literal">null</span>) &#123;</span><br><span class="line">            contentType = <span class="string">&quot;application/octet-stream&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .contentType(MediaType.parseMediaType(contentType))</span><br><span class="line">                .header(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + resource.getFilename() + <span class="string">&quot;\&quot;&quot;</span>)</span><br><span class="line">                .body(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileController</code>类在接收到用户的请求后，使用<code>FileService</code>类提供的<code>storeFile()</code>方法将文件写入到系统中进行存储，其存储目录就是之前在<code>application.properties</code>配置文件中的<code>file.upload-dir</code>参数的值<code>./uploads</code>。</p><p>下载接口<code>downloadFile()</code>在接收到用户请求之后，使用<code>FileService</code>类提供的<code>loadFileAsResource()</code>方法获取存储在系统中文件并返回文件供用户下载。</p><p><code>FileService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.exception.FileException;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.property.FileProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path fileStorageLocation; <span class="comment">// 文件在本地存储的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileService</span><span class="params">(FileProperties fileProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileStorageLocation = Paths.get(fileProperties.getUploadDir()).toAbsolutePath().normalize();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(<span class="built_in">this</span>.fileStorageLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileException</span>(<span class="string">&quot;Could not create the directory where the uploaded files will be stored.&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储文件到系统</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">storeFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">// Normalize file name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Check if the file&#x27;s name contains invalid characters</span></span><br><span class="line">            <span class="keyword">if</span>(fileName.contains(<span class="string">&quot;..&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileException</span>(<span class="string">&quot;Sorry! Filename contains invalid path sequence &quot;</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Copy file to the target location (Replacing existing file with the same name)</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">targetLocation</span> <span class="operator">=</span> <span class="built_in">this</span>.fileStorageLocation.resolve(fileName);</span><br><span class="line">            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileException</span>(<span class="string">&quot;Could not store file &quot;</span> + fileName + <span class="string">&quot;. Please try again!&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">loadFileAsResource</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="built_in">this</span>.fileStorageLocation.resolve(fileName).normalize();</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(filePath.toUri());</span><br><span class="line">            <span class="keyword">if</span>(resource.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileException</span>(<span class="string">&quot;File not found &quot;</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileException</span>(<span class="string">&quot;File not found &quot;</span> + fileName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>在完成上述的代码之后，打开<code>SpringBootFileApplication.java</code>并运行，运行完成之后就可以使用 Postman 进行测试了。</p><p>单个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dd9ded46.png"></p><p>多个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda0c477.png"></p><p>文件下载结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda130d6.png"></p><h2 id="Web-前端开发"><a href="#Web-前端开发" class="headerlink" title="Web 前端开发"></a>Web 前端开发</h2><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/css/main.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sorry! Your browser doesn&#x27;t support Javascript<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;single-upload&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Single File<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;singleUploadForm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;singleUploadForm&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;singleFileUploadInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;file-input&quot;</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;primary submit-btn&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-response&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;singleFileUploadError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;singleFileUploadSuccess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;multiple-upload&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Multiple Files<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;multipleUploadForm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;multipleUploadForm&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;multipleFileUploadInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">class</span>=<span class="string">&quot;file-input&quot;</span> <span class="attr">multiple</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;primary submit-btn&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-response&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;multipleFileUploadError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;multipleFileUploadSuccess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.58</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.file-input</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">115px</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">11px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.27</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.single-upload</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e8e8e8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-response</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleUploadForm = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#singleUploadForm&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#singleFileUploadInput&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadError = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#singleFileUploadError&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadSuccess = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#singleFileUploadSuccess&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multipleUploadForm = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#multipleUploadForm&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#multipleFileUploadInput&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadError = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#multipleFileUploadError&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadSuccess = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#multipleFileUploadSuccess&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadSingleFile</span>(<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/uploadFile&quot;</span>);</span><br><span class="line"></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            singleFileUploadError.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            singleFileUploadSuccess.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;p&gt;File Uploaded Successfully.&lt;/p&gt;&lt;p&gt;DownloadUrl : &lt;a href=&#x27;&quot;</span> + response.<span class="property">fileDownloadUri</span> + <span class="string">&quot;&#x27; target=&#x27;_blank&#x27;&gt;&quot;</span> + response.<span class="property">fileDownloadUri</span> + <span class="string">&quot;&lt;/a&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">            singleFileUploadSuccess.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            singleFileUploadSuccess.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            singleFileUploadError.<span class="property">innerHTML</span> = (response &amp;&amp; response.<span class="property">message</span>) || <span class="string">&quot;Some Error Occurred&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadMultipleFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; files.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&quot;files&quot;</span>, files[index]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/uploadMultipleFiles&quot;</span>);</span><br><span class="line"></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            multipleFileUploadError.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&lt;p&gt;All Files Uploaded Successfully&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; response.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                content += <span class="string">&quot;&lt;p&gt;DownloadUrl : &lt;a href=&#x27;&quot;</span> + response[i].<span class="property">fileDownloadUri</span> + <span class="string">&quot;&#x27; target=&#x27;_blank&#x27;&gt;&quot;</span> + response[i].<span class="property">fileDownloadUri</span> + <span class="string">&quot;&lt;/a&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            multipleFileUploadSuccess.<span class="property">innerHTML</span> = content;</span><br><span class="line">            multipleFileUploadSuccess.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            multipleFileUploadSuccess.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            multipleFileUploadError.<span class="property">innerHTML</span> = (response &amp;&amp; response.<span class="property">message</span>) || <span class="string">&quot;Some Error Occurred&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">singleUploadForm.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> files = singleFileUploadInput.<span class="property">files</span>;</span><br><span class="line">    <span class="keyword">if</span>(files.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        singleFileUploadError.<span class="property">innerHTML</span> = <span class="string">&quot;Please select a file&quot;</span>;</span><br><span class="line">        singleFileUploadError.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">uploadSingleFile</span>(files[<span class="number">0</span>]);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">multipleUploadForm.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> files = multipleFileUploadInput.<span class="property">files</span>;</span><br><span class="line">    <span class="keyword">if</span>(files.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        multipleFileUploadError.<span class="property">innerHTML</span> = <span class="string">&quot;Please select at least one file&quot;</span>;</span><br><span class="line">        multipleFileUploadError.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">uploadMultipleFiles</span>(files);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，文件的上传及下载功能已完成。在正式环境中可能还需要将上传的文件存储到数据库，此处按照实际需求去处理即可。</p><p>本文源代码地址：<a href="https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-file-upload">https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-file-upload</a></p><p>本文参考(需要翻墙)：<a href="https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/">https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/</a></p>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java equals 和 == 完全解析</title>
      <link href="//posts/java-equals-fully-resolved/"/>
      <url>//posts/java-equals-fully-resolved/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/25/5c9867e360501.jpg"></p><p>今天朋友突然问到一个问题：</p><blockquote><p>两个对象使用 <code>x.equals(y)</code> 判断结果为 <code>true</code> 时，两个对象的 <code>hashCode</code> 可以不同吗？</p></blockquote><p>在Java编程中，判断两个对象是否相等常常使用 <code>equals()</code> 或是 <code>==</code> ，但是其中的区别和原理可能很多人并不完全清楚。今天就借着上面这个问题来看看 <code>equals()</code> 和 <code>==</code> 的区别和原理。</p><span id="more"></span><h2 id="1-数据类型与-的含义"><a href="#1-数据类型与-的含义" class="headerlink" title="1. 数据类型与&#x3D;&#x3D;的含义"></a>1. 数据类型与&#x3D;&#x3D;的含义</h2><p>Java中的数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>：</p><ol><li><strong>基本类型</strong>：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型</li></ol><ul><li>4 种整数类型：byte、short、int、long</li><li>2 种浮点数类型：float、double</li><li>1 种字符类型：char</li><li>1 种布尔类型：boolean</li></ul><ol start="2"><li><strong>引用类型</strong>：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式</li></ol><ul><li>类</li><li>接口</li><li>数组</li></ul><blockquote><p>对于基本类型来说， <code>==</code> 比较的是它们的值<br>对于引用类型来说， <code>==</code> 比较的是它们在内存中存放的地址（堆内存地址）</p></blockquote><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;James&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;James&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;num1 == num2 : &quot;</span> + (num1 == num2));</span><br><span class="line">    System.out.println(<span class="string">&quot;str1 address : &quot;</span> + System.identityHashCode(str1) + <span class="string">&quot;;\nstr2 address : &quot;</span> + System.identityHashCode(str1) + <span class="string">&quot;;\nstr1 == str2 : &quot;</span> + (str1 == str2));</span><br><span class="line">    System.out.println(<span class="string">&quot;str3 address : &quot;</span> + System.identityHashCode(str3) + <span class="string">&quot;;\nstr4 address : &quot;</span> + System.identityHashCode(str4) + <span class="string">&quot;;\nstr3 == str4 : &quot;</span> + (str3 == str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，可以得到以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 == num2 : true</span><br><span class="line"></span><br><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1 == str2 : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3 == str4 : false</span><br></pre></td></tr></table></figure><p>可以看到str1和str2的内存地址都是<code>1174290147</code>,所以使用<code>==</code>判断为<code>true</code>,但是str3和str4的地址是不同的，所以判断为<code>false</code>。</p><h2 id="2-equals-方法解析"><a href="#2-equals-方法解析" class="headerlink" title="2. equals() 方法解析"></a>2. equals() 方法解析</h2><p>在Java语言中，所有类都是继承于<code>Object</code>这个超类的，在这个类中也有一个<code>equals()</code>方法，那么我们先来看一下这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看得出，这个方法很简单，就是比较对象的内存地址的。所以在对象没有重写这个方法时，默认使用此方法，即比较对象的内存地址值。但是类似于String、Integer等类均已重写了<code>equals()</code>。下面以<code>String</code>为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> length();</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (charAt(i) != anotherString.charAt(i))</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显，String的equals()方法仅仅是对比它的 <strong>数据值</strong>，而不是对象的 <strong>内存地址</strong> 。</p><p>以 <code>String</code> 为例测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;James&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;James&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;str1 address : &quot;</span> + System.identityHashCode(str1) + <span class="string">&quot;;\nstr2 address : &quot;</span> + System.identityHashCode(str1) + <span class="string">&quot;;\nstr1.equals(str2) : &quot;</span> + str1.equals(str2));</span><br><span class="line">    System.out.println(<span class="string">&quot;str3 address : &quot;</span> + System.identityHashCode(str3) + <span class="string">&quot;;\nstr4 address : &quot;</span> + System.identityHashCode(str4) + <span class="string">&quot;;\nstr3.equals(str4) : &quot;</span> + str3.equals(str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1.equals(str2) : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3.equals(str4) : true</span><br></pre></td></tr></table></figure><p>可以发现不管对象的内存地址是否相同并不影响其结果，所以String类型比较的是 <strong>数据值</strong>, 而不是 <strong>内存地址值</strong>。</p><p>所以总结一下<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><code>==</code></li></ol><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul><ol start="2"><li><code>equals()</code></li></ol><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul><h2 id="3-equals-与-hashCode"><a href="#3-equals-与-hashCode" class="headerlink" title="3. equals() 与 hashCode()"></a>3. equals() 与 hashCode()</h2><p>在详细的了解了<code>==</code>和<code>equals()</code>的作用和区别后，现在来研究一下之前的那个问题：</p><blockquote><p>两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>可以不同吗？</p></blockquote><p>首先我们需要知道<code>hashCode</code>到底是什么？还是从<code>Object</code>这个超类来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> identityHashCode(<span class="built_in">this</span>); <span class="comment">// 此处返回对象的内存地址值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码也很简单，看来默认情况下，<code>hashCode</code>就等于对象的 <strong>内存地址值</strong>（注：<code>System.identityHashCode(Object obj)</code>方法用于获取对象的内存地址，之前的样例代码中有使用）。和<code>equals()</code>方法一样重写之后，<code>hashCode()</code>方法方法也是可以被重写的，而且两者一般情况下都是成对出现。</p><p>简单测试一下String类型重写<code>hashCode()</code>方法之后有什么变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;str1 address : &quot;</span> + System.identityHashCode(str1) + <span class="string">&quot;\nstr1 hashCode : &quot;</span> + str1.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147</span><br><span class="line">str1 hashCode : 71338276</span><br></pre></td></tr></table></figure><p>很明显，hashCode 已经不是内存地址了。</p><p>那么总结一下：</p><ul><li><code>equals()</code>：默认情况下比较的是对象的 <strong>内存地址值</strong>，被重写后按照重写要求进行比较，一般是比较对象的 <strong>数据值</strong></li><li><code>hashCode()</code>: 默认情况下为对象的 <strong>内存地址值</strong>，被重写后按照重写要求生成新的值。</li></ul><p>到此对于刚开始提出的问题应该很好解决了。对于这两个对象，只要我们重写<code>equals()</code>方法，就可以比较对象的 <strong>数据值</strong>，而不重写<code>hashCode()</code>方法，此时两个对象的 <strong>hashCode</strong> 就默认为内存地址值了，只要将两个对象指向不同的地址即可。</p><p>验证环节，先创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomBean</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">CustomBean</span> <span class="variable">that</span> <span class="operator">=</span> (CustomBean) o;</span><br><span class="line">        <span class="keyword">return</span> age == that.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, that.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public int hashCode() &#123;</span></span><br><span class="line">    <span class="comment">//     return Objects.hash(name, age);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CustomBean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomBean</span>(<span class="string">&quot;James&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="type">CustomBean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomBean</span>(<span class="string">&quot;James&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;x.hashCode: &quot;</span> + x.hashCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;x address : &quot;</span> + System.identityHashCode(x));</span><br><span class="line">    System.out.println(<span class="string">&quot;y.hashCode: &quot;</span> + y.hashCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;x address : &quot;</span> + System.identityHashCode(y));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;x and y is equals : &quot;</span> + x.equals(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x.hashCode: 1174290147</span><br><span class="line">x address : 1174290147</span><br><span class="line"></span><br><span class="line">y.hashCode: 1289696681</span><br><span class="line">x address : 1289696681</span><br><span class="line"></span><br><span class="line">x and y is equals : true</span><br></pre></td></tr></table></figure><p>很明显，这就是问题中所描述的那种情况：两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>不相同。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>至此，<code>==</code>和<code>equals()</code>的区别及作用，<code>equals()</code>和<code>hashCode</code>的关系及使用已经了解清楚了。下面再总结一下：</p><p>对于<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><code>==</code></li></ol><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul><ol start="2"><li><code>equals()</code></li></ol><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul><p>对于<code>equals()</code>和<code>hashCode()</code>的关系：</p><p>根据<code>Object</code>超类中的文档说明，<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。上面的例子只是举例说明存在那种情况，但那并不是一个很好的应用。</p><ul><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li></ul><p>重要的事情说三遍。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之Log4j2的配置使用</title>
      <link href="//posts/spring-boot-log4j2-config/"/>
      <url>//posts/spring-boot-log4j2-config/</url>
      
        <content type="html"><![CDATA[<p>后台程序开发及上线时，一般都会用到Log信息打印及Log日志记录，开发时通过Log信息打印可以快速的定位问题所在，帮助我们快捷开发。程序上线后如遇到Bug或错误，此时则需要日志记录来查找发现问题所在。</p><p>Spring Boot 可以集成很多不同的日志系统，其中最常用的Apache Log4j，而Log4j 2是Log4j的升级版本，Log4j 2相对于Log4j 1.x 有了很多显著的改善。所以这篇博客就直接来说说Spring Boot如何集成并配置使用Log4j2。</p><span id="more"></span><h2 id="1-导入Log4j2的包"><a href="#1-导入Log4j2的包" class="headerlink" title="1. 导入Log4j2的包"></a>1. 导入Log4j2的包</h2><p>如果你使用Gradle，则在<code>build.gradle</code>文件中添加以下依赖。示例代码中使用的是Gradle方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // log4j2</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-api:2.8&quot;</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-core:2.8&quot;</span><br><span class="line">    // 用来支持Logger中的Async</span><br><span class="line">    implementation &#x27;com.lmax:disruptor:3.3.6&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用Maven，则在<code>pom.xml</code>文件中添加以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加-log4j2-配置文件"><a href="#2-添加-log4j2-配置文件" class="headerlink" title="2. 添加 log4j2 配置文件"></a>2. 添加 log4j2 配置文件</h2><p>在项目的resources资源文件根目录下创建<code>log4j2.xml</code>文件并复制以下代码到文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span></span><br><span class="line"><span class="comment"> 你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;OFF&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;fileGz&quot;</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出控制台日志的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;infoFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;fileName&#125;/web-info.log&quot;</span> <span class="attr">immediateFlush</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-info.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;6&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录info和warn级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;DENY&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 存储所有error信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;errorFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;fileName&#125;/web-error.log&quot;</span> <span class="attr">immediateFlush</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-error.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;6&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录error级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncRoot</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;infoFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;errorFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-编写Log4j2辅助类"><a href="#3-编写Log4j2辅助类" class="headerlink" title="3. 编写Log4j2辅助类"></a>3. 编写Log4j2辅助类</h2><p>做好以上的配置之后，我们可以编写一个辅助类，让我们更方便的使用Log4j2来记录日志。</p><p>在utils包中创建<code>L.java</code>类文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logger 日志记录辅助类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by James on 2017/5/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">L</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogManager.getLogger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">L</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* cannot be instantiated */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;cannot be instantiated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title function_">getLogger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOGGER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.trace(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.debug(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">i</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.info(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">w</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.warn(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">e</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        LOGGER.fatal(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完辅助类，使用起来就很简单了，通过下面的代码就可以轻松使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Spring Boot系列之Log4j2的配置及使用&quot;</span>;</span><br><span class="line">        L.t(msg); <span class="comment">// Log4j2.xml中配置的level=&quot;info&quot;,所以此条信息并不会打印在控制台</span></span><br><span class="line">        L.d(msg); <span class="comment">// 同上，级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line">        L.i(msg);</span><br><span class="line">        L.w(msg);</span><br><span class="line">        L.e(msg);</span><br><span class="line">        L.f(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的辅助类只是写了一些基本的使用方法，你可以根据你的需求进行定制，增加更多的辅助方法。对于辅助类中没有提供的方法也可以使用<code>L.getLogger()</code>方法获取Logger实例来使用。</p><h2 id="4-结果验证"><a href="#4-结果验证" class="headerlink" title="4. 结果验证"></a>4. 结果验证</h2><p>日志的Level分级：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。</p><p>因为我的log4j2中的level设置的是<code>INFO</code>级别。所以打印信息中只能看到 <code>INFO</code> 、<code>WARN</code> 、 <code>ERROR</code> 三种级别(FATAL级别的信息没有打印，否则也可以看到)。</p><p>打印信息如下图所示：</p><p><img src="https://ooo.0o0.ooo/2017/05/11/59141c76b8b07.png"></p><p>同时在电脑系统中生成了Log文件，如下图所示：</p><p><img src="https://i.loli.net/2019/04/01/5ca223a39fdc0.png"></p><p>观察路径可以发现，这个路径正是在<code>Log4j2.xml</code>中设置的路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;fileGz&quot;</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-更多"><a href="#5-更多" class="headerlink" title="5. 更多"></a>5. 更多</h2><p>Log4j2的Github地址：<a href="https://github.com/apache/logging-log4j2">https://github.com/apache/logging-log4j2</a></p><p>本教程的示例代码地址：<a href="https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-log4j2">https://github.com/moyu-jun/spring-boot-example/tree/master/spring-boot-log4j2</a></p>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> spring </tag>
            
            <tag> log4j </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
